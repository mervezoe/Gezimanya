/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "ThriftFlattenedEsObject.h"
#import "ThriftUserVariable.h"
#import "ThriftUserUpdateAction.h"

#import "ThriftUserUpdateEvent.h"


@implementation ThriftUserUpdateEventConstants
+ (void) initialize {
}
@end

@implementation ThriftUserUpdateEvent

- (id) initWithZoneId: (int32_t) zoneId roomId: (int32_t) roomId action: (int) action userName: (NSString *) userName userVariables: (NSArray *) userVariables sendingVideo: (BOOL) sendingVideo videoStreamName: (NSString *) videoStreamName
{
  self = [super init];
  __zoneId = zoneId;
  __zoneId_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __action = action;
  __action_isset = YES;
  __userName = [userName retain];
  __userName_isset = YES;
  __userVariables = [userVariables retain];
  __userVariables_isset = YES;
  __sendingVideo = sendingVideo;
  __sendingVideo_isset = YES;
  __videoStreamName = [videoStreamName retain];
  __videoStreamName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"zoneId"])
  {
    __zoneId = [decoder decodeInt32ForKey: @"zoneId"];
    __zoneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"action"])
  {
    __action = [decoder decodeIntForKey: @"action"];
    __action_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"userVariables"])
  {
    __userVariables = [[decoder decodeObjectForKey: @"userVariables"] retain];
    __userVariables_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendingVideo"])
  {
    __sendingVideo = [decoder decodeBoolForKey: @"sendingVideo"];
    __sendingVideo_isset = YES;
  }
  if ([decoder containsValueForKey: @"videoStreamName"])
  {
    __videoStreamName = [[decoder decodeObjectForKey: @"videoStreamName"] retain];
    __videoStreamName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__zoneId_isset)
  {
    [encoder encodeInt32: __zoneId forKey: @"zoneId"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
  if (__action_isset)
  {
    [encoder encodeInt: __action forKey: @"action"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__userVariables_isset)
  {
    [encoder encodeObject: __userVariables forKey: @"userVariables"];
  }
  if (__sendingVideo_isset)
  {
    [encoder encodeBool: __sendingVideo forKey: @"sendingVideo"];
  }
  if (__videoStreamName_isset)
  {
    [encoder encodeObject: __videoStreamName forKey: @"videoStreamName"];
  }
}

- (void) dealloc
{
  [__userName release];
  [__userVariables release];
  [__videoStreamName release];
  [super dealloc];
}

- (int32_t) zoneId {
  return __zoneId;
}

- (void) setZoneId: (int32_t) zoneId {
  __zoneId = zoneId;
  __zoneId_isset = YES;
}

- (BOOL) zoneIdIsSet {
  return __zoneId_isset;
}

- (void) unsetZoneId {
  __zoneId_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (int) action {
  return __action;
}

- (void) setAction: (int) action {
  __action = action;
  __action_isset = YES;
}

- (BOOL) actionIsSet {
  return __action_isset;
}

- (void) unsetAction {
  __action_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain] autorelease];
}

- (void) setUserName: (NSString *) userName {
  [userName retain];
  [__userName release];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release];
  __userName = nil;
  __userName_isset = NO;
}

- (NSArray *) userVariables {
  return [[__userVariables retain] autorelease];
}

- (void) setUserVariables: (NSArray *) userVariables {
  [userVariables retain];
  [__userVariables release];
  __userVariables = userVariables;
  __userVariables_isset = YES;
}

- (BOOL) userVariablesIsSet {
  return __userVariables_isset;
}

- (void) unsetUserVariables {
  [__userVariables release];
  __userVariables = nil;
  __userVariables_isset = NO;
}

- (BOOL) sendingVideo {
  return __sendingVideo;
}

- (void) setSendingVideo: (BOOL) sendingVideo {
  __sendingVideo = sendingVideo;
  __sendingVideo_isset = YES;
}

- (BOOL) sendingVideoIsSet {
  return __sendingVideo_isset;
}

- (void) unsetSendingVideo {
  __sendingVideo_isset = NO;
}

- (NSString *) videoStreamName {
  return [[__videoStreamName retain] autorelease];
}

- (void) setVideoStreamName: (NSString *) videoStreamName {
  [videoStreamName retain];
  [__videoStreamName release];
  __videoStreamName = videoStreamName;
  __videoStreamName_isset = YES;
}

- (BOOL) videoStreamNameIsSet {
  return __videoStreamName_isset;
}

- (void) unsetVideoStreamName {
  [__videoStreamName release];
  __videoStreamName = nil;
  __videoStreamName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZoneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setAction: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ThriftUserVariable *_elem2 = [[ThriftUserVariable alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setUserVariables: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSendingVideo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVideoStreamName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftUserUpdateEvent"];
  if (__zoneId_isset) {
    [outProtocol writeFieldBeginWithName: @"zoneId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __zoneId];
    [outProtocol writeFieldEnd];
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__action_isset) {
    [outProtocol writeFieldBeginWithName: @"action" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __action];
    [outProtocol writeFieldEnd];
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userVariables_isset) {
    if (__userVariables != nil) {
      [outProtocol writeFieldBeginWithName: @"userVariables" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userVariables count]];
        int i4;
        for (i4 = 0; i4 < [__userVariables count]; i4++)
        {
          [[__userVariables objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sendingVideo_isset) {
    [outProtocol writeFieldBeginWithName: @"sendingVideo" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __sendingVideo];
    [outProtocol writeFieldEnd];
  }
  if (__videoStreamName_isset) {
    if (__videoStreamName != nil) {
      [outProtocol writeFieldBeginWithName: @"videoStreamName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __videoStreamName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftUserUpdateEvent("];
  [ms appendString: @"zoneId:"];
  [ms appendFormat: @"%i", __zoneId];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @",action:"];
  [ms appendFormat: @"%i", __action];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",userVariables:"];
  [ms appendFormat: @"%@", __userVariables];
  [ms appendString: @",sendingVideo:"];
  [ms appendFormat: @"%i", __sendingVideo];
  [ms appendString: @",videoStreamName:"];
  [ms appendFormat: @"\"%@\"", __videoStreamName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


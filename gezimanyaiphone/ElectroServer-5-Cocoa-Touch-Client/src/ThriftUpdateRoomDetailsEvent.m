/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "ThriftUpdateRoomDetailsEvent.h"


@implementation ThriftUpdateRoomDetailsEventConstants
+ (void) initialize {
}
@end

@implementation ThriftUpdateRoomDetailsEvent

- (id) initWithZoneId: (int32_t) zoneId roomId: (int32_t) roomId capacityUpdated: (BOOL) capacityUpdated capacity: (int32_t) capacity roomDescriptionUpdated: (BOOL) roomDescriptionUpdated roomDescription: (NSString *) roomDescription roomNameUpdated: (BOOL) roomNameUpdated roomName: (NSString *) roomName hasPassword: (BOOL) hasPassword hasPasswordUpdated: (BOOL) hasPasswordUpdated hiddenUpdated: (BOOL) hiddenUpdated hidden: (BOOL) hidden
{
  self = [super init];
  __zoneId = zoneId;
  __zoneId_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __capacityUpdated = capacityUpdated;
  __capacityUpdated_isset = YES;
  __capacity = capacity;
  __capacity_isset = YES;
  __roomDescriptionUpdated = roomDescriptionUpdated;
  __roomDescriptionUpdated_isset = YES;
  __roomDescription = [roomDescription retain];
  __roomDescription_isset = YES;
  __roomNameUpdated = roomNameUpdated;
  __roomNameUpdated_isset = YES;
  __roomName = [roomName retain];
  __roomName_isset = YES;
  __hasPassword = hasPassword;
  __hasPassword_isset = YES;
  __hasPasswordUpdated = hasPasswordUpdated;
  __hasPasswordUpdated_isset = YES;
  __hiddenUpdated = hiddenUpdated;
  __hiddenUpdated_isset = YES;
  __hidden = hidden;
  __hidden_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"zoneId"])
  {
    __zoneId = [decoder decodeInt32ForKey: @"zoneId"];
    __zoneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"capacityUpdated"])
  {
    __capacityUpdated = [decoder decodeBoolForKey: @"capacityUpdated"];
    __capacityUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"capacity"])
  {
    __capacity = [decoder decodeInt32ForKey: @"capacity"];
    __capacity_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomDescriptionUpdated"])
  {
    __roomDescriptionUpdated = [decoder decodeBoolForKey: @"roomDescriptionUpdated"];
    __roomDescriptionUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomDescription"])
  {
    __roomDescription = [[decoder decodeObjectForKey: @"roomDescription"] retain];
    __roomDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomNameUpdated"])
  {
    __roomNameUpdated = [decoder decodeBoolForKey: @"roomNameUpdated"];
    __roomNameUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomName"])
  {
    __roomName = [[decoder decodeObjectForKey: @"roomName"] retain];
    __roomName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasPassword"])
  {
    __hasPassword = [decoder decodeBoolForKey: @"hasPassword"];
    __hasPassword_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasPasswordUpdated"])
  {
    __hasPasswordUpdated = [decoder decodeBoolForKey: @"hasPasswordUpdated"];
    __hasPasswordUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"hiddenUpdated"])
  {
    __hiddenUpdated = [decoder decodeBoolForKey: @"hiddenUpdated"];
    __hiddenUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"hidden"])
  {
    __hidden = [decoder decodeBoolForKey: @"hidden"];
    __hidden_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__zoneId_isset)
  {
    [encoder encodeInt32: __zoneId forKey: @"zoneId"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
  if (__capacityUpdated_isset)
  {
    [encoder encodeBool: __capacityUpdated forKey: @"capacityUpdated"];
  }
  if (__capacity_isset)
  {
    [encoder encodeInt32: __capacity forKey: @"capacity"];
  }
  if (__roomDescriptionUpdated_isset)
  {
    [encoder encodeBool: __roomDescriptionUpdated forKey: @"roomDescriptionUpdated"];
  }
  if (__roomDescription_isset)
  {
    [encoder encodeObject: __roomDescription forKey: @"roomDescription"];
  }
  if (__roomNameUpdated_isset)
  {
    [encoder encodeBool: __roomNameUpdated forKey: @"roomNameUpdated"];
  }
  if (__roomName_isset)
  {
    [encoder encodeObject: __roomName forKey: @"roomName"];
  }
  if (__hasPassword_isset)
  {
    [encoder encodeBool: __hasPassword forKey: @"hasPassword"];
  }
  if (__hasPasswordUpdated_isset)
  {
    [encoder encodeBool: __hasPasswordUpdated forKey: @"hasPasswordUpdated"];
  }
  if (__hiddenUpdated_isset)
  {
    [encoder encodeBool: __hiddenUpdated forKey: @"hiddenUpdated"];
  }
  if (__hidden_isset)
  {
    [encoder encodeBool: __hidden forKey: @"hidden"];
  }
}

- (void) dealloc
{
  [__roomDescription release];
  [__roomName release];
  [super dealloc];
}

- (int32_t) zoneId {
  return __zoneId;
}

- (void) setZoneId: (int32_t) zoneId {
  __zoneId = zoneId;
  __zoneId_isset = YES;
}

- (BOOL) zoneIdIsSet {
  return __zoneId_isset;
}

- (void) unsetZoneId {
  __zoneId_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (BOOL) capacityUpdated {
  return __capacityUpdated;
}

- (void) setCapacityUpdated: (BOOL) capacityUpdated {
  __capacityUpdated = capacityUpdated;
  __capacityUpdated_isset = YES;
}

- (BOOL) capacityUpdatedIsSet {
  return __capacityUpdated_isset;
}

- (void) unsetCapacityUpdated {
  __capacityUpdated_isset = NO;
}

- (int32_t) capacity {
  return __capacity;
}

- (void) setCapacity: (int32_t) capacity {
  __capacity = capacity;
  __capacity_isset = YES;
}

- (BOOL) capacityIsSet {
  return __capacity_isset;
}

- (void) unsetCapacity {
  __capacity_isset = NO;
}

- (BOOL) roomDescriptionUpdated {
  return __roomDescriptionUpdated;
}

- (void) setRoomDescriptionUpdated: (BOOL) roomDescriptionUpdated {
  __roomDescriptionUpdated = roomDescriptionUpdated;
  __roomDescriptionUpdated_isset = YES;
}

- (BOOL) roomDescriptionUpdatedIsSet {
  return __roomDescriptionUpdated_isset;
}

- (void) unsetRoomDescriptionUpdated {
  __roomDescriptionUpdated_isset = NO;
}

- (NSString *) roomDescription {
  return [[__roomDescription retain] autorelease];
}

- (void) setRoomDescription: (NSString *) roomDescription {
  [roomDescription retain];
  [__roomDescription release];
  __roomDescription = roomDescription;
  __roomDescription_isset = YES;
}

- (BOOL) roomDescriptionIsSet {
  return __roomDescription_isset;
}

- (void) unsetRoomDescription {
  [__roomDescription release];
  __roomDescription = nil;
  __roomDescription_isset = NO;
}

- (BOOL) roomNameUpdated {
  return __roomNameUpdated;
}

- (void) setRoomNameUpdated: (BOOL) roomNameUpdated {
  __roomNameUpdated = roomNameUpdated;
  __roomNameUpdated_isset = YES;
}

- (BOOL) roomNameUpdatedIsSet {
  return __roomNameUpdated_isset;
}

- (void) unsetRoomNameUpdated {
  __roomNameUpdated_isset = NO;
}

- (NSString *) roomName {
  return [[__roomName retain] autorelease];
}

- (void) setRoomName: (NSString *) roomName {
  [roomName retain];
  [__roomName release];
  __roomName = roomName;
  __roomName_isset = YES;
}

- (BOOL) roomNameIsSet {
  return __roomName_isset;
}

- (void) unsetRoomName {
  [__roomName release];
  __roomName = nil;
  __roomName_isset = NO;
}

- (BOOL) hasPassword {
  return __hasPassword;
}

- (void) setHasPassword: (BOOL) hasPassword {
  __hasPassword = hasPassword;
  __hasPassword_isset = YES;
}

- (BOOL) hasPasswordIsSet {
  return __hasPassword_isset;
}

- (void) unsetHasPassword {
  __hasPassword_isset = NO;
}

- (BOOL) hasPasswordUpdated {
  return __hasPasswordUpdated;
}

- (void) setHasPasswordUpdated: (BOOL) hasPasswordUpdated {
  __hasPasswordUpdated = hasPasswordUpdated;
  __hasPasswordUpdated_isset = YES;
}

- (BOOL) hasPasswordUpdatedIsSet {
  return __hasPasswordUpdated_isset;
}

- (void) unsetHasPasswordUpdated {
  __hasPasswordUpdated_isset = NO;
}

- (BOOL) hiddenUpdated {
  return __hiddenUpdated;
}

- (void) setHiddenUpdated: (BOOL) hiddenUpdated {
  __hiddenUpdated = hiddenUpdated;
  __hiddenUpdated_isset = YES;
}

- (BOOL) hiddenUpdatedIsSet {
  return __hiddenUpdated_isset;
}

- (void) unsetHiddenUpdated {
  __hiddenUpdated_isset = NO;
}

- (BOOL) hidden {
  return __hidden;
}

- (void) setHidden: (BOOL) hidden {
  __hidden = hidden;
  __hidden_isset = YES;
}

- (BOOL) hiddenIsSet {
  return __hidden_isset;
}

- (void) unsetHidden {
  __hidden_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZoneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCapacityUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRoomDescriptionUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRoomNameUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasPasswordUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHiddenUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHidden: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftUpdateRoomDetailsEvent"];
  if (__zoneId_isset) {
    [outProtocol writeFieldBeginWithName: @"zoneId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __zoneId];
    [outProtocol writeFieldEnd];
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__capacityUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"capacityUpdated" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __capacityUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__capacity_isset) {
    [outProtocol writeFieldBeginWithName: @"capacity" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __capacity];
    [outProtocol writeFieldEnd];
  }
  if (__roomDescriptionUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"roomDescriptionUpdated" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __roomDescriptionUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__roomDescription_isset) {
    if (__roomDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"roomDescription" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __roomDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomNameUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"roomNameUpdated" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __roomNameUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__roomName_isset) {
    if (__roomName != nil) {
      [outProtocol writeFieldBeginWithName: @"roomName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __roomName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hasPassword_isset) {
    [outProtocol writeFieldBeginWithName: @"hasPassword" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __hasPassword];
    [outProtocol writeFieldEnd];
  }
  if (__hasPasswordUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"hasPasswordUpdated" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __hasPasswordUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__hiddenUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"hiddenUpdated" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __hiddenUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__hidden_isset) {
    [outProtocol writeFieldBeginWithName: @"hidden" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __hidden];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftUpdateRoomDetailsEvent("];
  [ms appendString: @"zoneId:"];
  [ms appendFormat: @"%i", __zoneId];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @",capacityUpdated:"];
  [ms appendFormat: @"%i", __capacityUpdated];
  [ms appendString: @",capacity:"];
  [ms appendFormat: @"%i", __capacity];
  [ms appendString: @",roomDescriptionUpdated:"];
  [ms appendFormat: @"%i", __roomDescriptionUpdated];
  [ms appendString: @",roomDescription:"];
  [ms appendFormat: @"\"%@\"", __roomDescription];
  [ms appendString: @",roomNameUpdated:"];
  [ms appendFormat: @"%i", __roomNameUpdated];
  [ms appendString: @",roomName:"];
  [ms appendFormat: @"\"%@\"", __roomName];
  [ms appendString: @",hasPassword:"];
  [ms appendFormat: @"%i", __hasPassword];
  [ms appendString: @",hasPasswordUpdated:"];
  [ms appendFormat: @"%i", __hasPasswordUpdated];
  [ms appendString: @",hiddenUpdated:"];
  [ms appendFormat: @"%i", __hiddenUpdated];
  [ms appendString: @",hidden:"];
  [ms appendFormat: @"%i", __hidden];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


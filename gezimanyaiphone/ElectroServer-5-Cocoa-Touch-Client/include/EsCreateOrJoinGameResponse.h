//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftCreateOrJoinGameResponse.h>
#import <EsFlattenedEsObjectRO.h>
#import <ThriftFlattenedEsObjectRO.h>
#import <EsErrorType.h>
#import <ThriftErrorType.h>

/**
 * The QuickJoinGameRequest is used to create a new game on the server, or to join a game that matches the criteria passed in. That request leads to this response.
 <br><br>
 This server feature is called the Game Manager. In order to use a game 
 with the Game Manager the game must be registered with the server via the Remote Admin. A game is essentially just a room with one or more plugins associated with it. All games that are 
 managed can be searched using the FindGamesReqest. A game can be joined via QuickJoinGameRequest or by using the JoinGameRequest and specifying a specific game id. You can learn of a 
 game id by someone telling you via various server messaging techniques, or by loading a list of games using the FindGamesRequest and looking at the game ids.
 * 
 * This example shows how to create a fictional game of poker. If the game was registered with the server as PokerGame, and if the game plugin was set up to receive and interpret 
 the custom EsObject passed in, then this is what the code to create or join such a game would look like.
 
<pre>
private var _es:ElectroServer;

private function initialize():void {
        _es.engine.addEventListener(MessageType.CreateOrJoinGameResponse.name, onCreateOrJoinGameResponse);
        _es.engine.addEventListener(MessageType.JoinRoomEvent.name, onJoinRoomEvent);

        //create the request
        var qjr:QuickJoinGameRequest = new QuickJoinGameRequest();

        //gameType is the name of the game as registered on the server
        qjr.gameType = "PokerGame";

        //zone in which to put the game
        qjr.zoneName = "GameZone";

        //should the game show up in the room list
        qjr.hidden = false;

        //if true, the game is automatically locked when you join until unlocked
        qjr.locked = false;

        //if true, then the request won't look for an existing game for you to join, it will only create one
        qjr.createOnly = false;

        //optional EsObject of data to pass into the game
        var esob:EsObject = new EsObject();
        esob.setInteger("potLimit", 2500);
        esob.setInteger("tableSize", 8);

        qjr.gameDetails = esob;

        _es.engine.send(qjr);
}

private function onJoinRoomEvent(e:JoinRoomEvent):void {
        trace("Joined the game room");
}

private function onCreateOrJoinGameResponse(e:CreateOrJoinGameResponse):void {
        trace("Joined game: " + e.successful.toString());
}
</pre>
 */
@interface EsCreateOrJoinGameResponse : EsResponse {
@private
	BOOL successful_set_;
	BOOL successful_;
	BOOL error_set_;
	int error_;
	BOOL zoneId_set_;
	int32_t zoneId_;
	BOOL roomId_set_;
	int32_t roomId_;
	BOOL gameId_set_;
	int32_t gameId_;
	BOOL gameDetails_set_;
	EsObject* gameDetails_;
}

/**
 * If true, the client successfully joined the game.
 */
@property(nonatomic) BOOL successful;
/**
 * If successful is false then this contains the reason why
 */
@property(nonatomic) int error;
/**
 * The id of the zone that contains the new game, if successful is true
 */
@property(nonatomic) int32_t zoneId;
/**
 * The id of the room that contains the new game, if successful is true
 */
@property(nonatomic) int32_t roomId;
/**
 * The id of the new game if successful is true
 */
@property(nonatomic) int32_t gameId;
@property(retain,nonatomic) EsObject* gameDetails;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftCreateOrJoinGameResponse*) toThrift;
- (id) newThrift;
@end

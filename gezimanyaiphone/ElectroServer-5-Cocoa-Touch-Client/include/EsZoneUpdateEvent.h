//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftZoneUpdateEvent.h>
#import <EsRoomListEntry.h>
#import <ThriftRoomListEntry.h>
#import <EsZoneUpdateAction.h>
#import <ThriftZoneUpdateAction.h>

/**
 * This event occurs when the room list changes in a zone that your client can see, or when a public property on a room in that zone changes. For example, this event occurs whenever 
 a room is created, removed, or when something public about a room is updated such as its description or user count.
 * 
 * This example shows how to listen for the event and then access the updated information.
<pre>
private var _es:ElectroServer;

private function initialize():void {
        _es.engine.addEventListener(MessageType.ZoneUpdateEvent.name, onZoneUpdateEvent);
}

private function onZoneUpdateEvent(e:ZoneUpdateEvent):void {
        switch (e.action) {
                case ZoneUpdateAction.AddRoom:
                        //the managerHelper already knows about this new room, so access it that way
                        trace("this room just added: " +_es.managerHelper.zoneManager.zoneById(e.zoneId).roomById(e.roomId).name);
                        break;
                case ZoneUpdateAction.DeleteRoom:
                        //the managerHelper has already removed the room, so to see the name of what was removed inspect the event object
                        trace("this room just removed: " + e.roomListEntry.roomName);
                        break;
                case ZoneUpdateAction.UpdateRoom:
                        //the managerHelper has already updated the userCount for this room
                        // Note: there is no roomListEntry for the event with an UpdateRoom action!
                        trace("User count for roomId: " + e.roomId + " just changed to: " + e.roomCount);
                        break;
        }
}
</pre>
 */
@interface EsZoneUpdateEvent : EsEvent {
@private
	BOOL zoneId_set_;
	int32_t zoneId_;
	BOOL action_set_;
	int action_;
	BOOL roomId_set_;
	int32_t roomId_;
	BOOL roomCount_set_;
	int32_t roomCount_;
	BOOL roomListEntry_set_;
	EsRoomListEntry* roomListEntry_;
}

/**
 * Id of the zone that was updated.
 */
@property(nonatomic) int32_t zoneId;
/**
 * ZoneUpdateAction instance that describes the type of update that occurred.
 */
@property(nonatomic) int action;
/**
 * The id of the room that was created or updated, if applicable.
 */
@property(nonatomic) int32_t roomId;
/**
 * The number of users in the updated room, if applicable.
 */
@property(nonatomic) int32_t roomCount;
/**
 * The room that was added or updated, if applicable.
 */
@property(retain,nonatomic) EsRoomListEntry* roomListEntry;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftZoneUpdateEvent*) toThrift;
- (id) newThrift;
@end

//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftJoinRoomRequest.h>

/**
 * If you know that a specific room already exists, then you can join it using this request. At a minimum you need to specify either the zone id and room id, or the zone name and 
 room name. If the room is password protected then it should be specified here. In addition, you have the ability to modify the user subscriptions in the same way as you could 
 on the CreateRoomRequest. 
 
 <br>When joining a room there are many events that you are automatically subscribed to, unless you opt out. <br><br>Subscription properties when joining a room (all of the following default to true):
 <ul>
 <li>receivingRoomListUpdates - If true, you receive ZoneUpdateEvent events when rooms are added to or removed from this zone, or when the the total count of users in one of those rooms changes.</li>
 <li>receivingUserListUpdates - If true, you receive RoomUserUpdateEvent events when the user list in your room changes.</li>
 <li>receivingRoomVariableUpdates - If true, you receive the initial room variable list for your room and RoomVariableUpdateEvent events when room variables in your room are created, removed, or modified.</li>
 <li>receivingUserVariableUpdates - If true, you receive the initial user variable list for new users joinin your room as well as UserVariableUpdateEvent events when new user variables are created, removed, or modified on a user.</li>
 <li>receivingVideoEvents - If true, you receive RoomUserUpdateEvent event when users in the room start or stop streaming live video to the server. The stream name is part of that event.</li>
 <li>receivingRoomAttributeUpdates - If true, you receive UpdateRoomDetailsEvent events when room properties such as capacity, description, or the password changes.</li>
 </ul>
 * 
 * Shows the most simple example of how to join a room with default subscriptions.
 <pre>
package  {
        import com.electrotank.electroserver5.api.JoinRoomRequest;
        import com.electrotank.electroserver5.api.JoinRoomEvent;
        import com.electrotank.electroserver5.api.MessageType;
        import com.electrotank.electroserver5.ElectroServer;
        import com.electrotank.electroserver5.user.User;
        import com.electrotank.electroserver5.zone.Room;
        import flash.events.Event;

        public class RoomJoiner {

                private var _es:ElectroServer;

                public function initialize():void {
                        //listen for the JoinRoomEvent so we know when it happens
                        _es.engine.addEventListener(MessageType.JoinRoomEvent.name, onJoinRoomEvent);

                        //create the request and populate it with the room details
                        var jrr:JoinRoomRequest = new JoinRoomRequest();
                        jrr.roomName = "MyRoom";
                        jrr.zoneName = "MyZone";

                        //send it
                        _es.engine.send(jrr);
                }

                private function onJoinRoomEvent(e:JoinRoomEvent):void {
                        trace("room joined!");

                        //get the room you're in
                        var room:Room = _es.managerHelper.zoneManager.zoneById(e.zoneId).roomById(e.roomId);

                        //print out the users in the room
                        for each (var user:User in room.users) {
                                trace(user.userName);
                        }
                }

                public function set es(value:ElectroServer):void {
                        _es = value;
                }

        }

}
    </pre>
 */
@interface EsJoinRoomRequest : EsRequest {
@private
	BOOL zoneName_set_;
	NSString* zoneName_;
	BOOL roomName_set_;
	NSString* roomName_;
	BOOL zoneId_set_;
	int32_t zoneId_;
	BOOL roomId_set_;
	int32_t roomId_;
	BOOL password_set_;
	NSString* password_;
	BOOL receivingRoomListUpdates_set_;
	BOOL receivingRoomListUpdates_;
	BOOL receivingRoomAttributeUpdates_set_;
	BOOL receivingRoomAttributeUpdates_;
	BOOL receivingUserListUpdates_set_;
	BOOL receivingUserListUpdates_;
	BOOL receivingUserVariableUpdates_set_;
	BOOL receivingUserVariableUpdates_;
	BOOL receivingRoomVariableUpdates_set_;
	BOOL receivingRoomVariableUpdates_;
	BOOL receivingVideoEvents_set_;
	BOOL receivingVideoEvents_;
}

/**
 * Name of the zone that contains the room. This is required or the zoneId is required, but not both.
 */
@property(retain,nonatomic) NSString* zoneName;
/**
 * Name of the room. This is required or the roomId is required, but not both.
 */
@property(retain,nonatomic) NSString* roomName;
/**
 * Id of the zone that contains the room. This is required or the zoneName is required, but not both.
 */
@property(nonatomic) int32_t zoneId;
/**
 * Id of the room to join. This is required or the roomName is required, but not both.
 */
@property(nonatomic) int32_t roomId;
/**
 * If the room is password protected then specify the password here.
 */
@property(retain,nonatomic) NSString* password;
/**
 * The default is true. This is a user-level property used when joining a room. You will find this property in the JoinRoomRequest as well. If true, the user will receive add/remove updaes to the room list for the current zone. This is part of the ZoneUpdateEvent.
 */
@property(nonatomic) BOOL receivingRoomListUpdates;
/**
 * The default is true. If true, you will receive UpdateRoomDetailsEvent events for all rooms in your zone. That includes description, capacity, password status, and room name.
 */
@property(nonatomic) BOOL receivingRoomAttributeUpdates;
/**
 * The default is true. This is a user-level property used when joining a room. You will find this property in the JoinRoomRequest as well. If true, the user will receive updates to the user list for this room through the RoomUserUpdateEvent.
 */
@property(nonatomic) BOOL receivingUserListUpdates;
/**
 * The default is true. This is a user-level property used when joining a room. You will find this property in the JoinRoomRequest as well. If true, the user will receive UserVariableUpdateEvent events.
 */
@property(nonatomic) BOOL receivingUserVariableUpdates;
/**
 * The default is true. This is a user-level property used when joining a room. You will find this property in the JoinRoomRequest as well. If true, the user will receive RoomVariableUpdateEvent events for the newly created room.
 */
@property(nonatomic) BOOL receivingRoomVariableUpdates;
/**
 * Default is true. If true, you will receive RoomUserUpdateEvent events when users in your room start or stop publishing live streams to the server. Video is only supported in Flash clients.
 */
@property(nonatomic) BOOL receivingVideoEvents;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftJoinRoomRequest*) toThrift;
- (id) newThrift;
@end

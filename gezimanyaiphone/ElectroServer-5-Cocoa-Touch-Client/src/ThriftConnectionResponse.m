/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "ThriftProtocolConfiguration.h"
#import "ThriftErrorType.h"

#import "ThriftConnectionResponse.h"


@implementation ThriftConnectionResponseConstants
+ (void) initialize {
}
@end

@implementation ThriftConnectionResponse

- (id) initWithSuccessful: (BOOL) successful hashId: (int32_t) hashId error: (int) error protocolConfiguration: (ThriftProtocolConfiguration *) protocolConfiguration serverVersion: (NSString *) serverVersion
{
  self = [super init];
  __successful = successful;
  __successful_isset = YES;
  __hashId = hashId;
  __hashId_isset = YES;
  __error = error;
  __error_isset = YES;
  __protocolConfiguration = [protocolConfiguration retain];
  __protocolConfiguration_isset = YES;
  __serverVersion = [serverVersion retain];
  __serverVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"successful"])
  {
    __successful = [decoder decodeBoolForKey: @"successful"];
    __successful_isset = YES;
  }
  if ([decoder containsValueForKey: @"hashId"])
  {
    __hashId = [decoder decodeInt32ForKey: @"hashId"];
    __hashId_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [decoder decodeIntForKey: @"error"];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"protocolConfiguration"])
  {
    __protocolConfiguration = [[decoder decodeObjectForKey: @"protocolConfiguration"] retain];
    __protocolConfiguration_isset = YES;
  }
  if ([decoder containsValueForKey: @"serverVersion"])
  {
    __serverVersion = [[decoder decodeObjectForKey: @"serverVersion"] retain];
    __serverVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__successful_isset)
  {
    [encoder encodeBool: __successful forKey: @"successful"];
  }
  if (__hashId_isset)
  {
    [encoder encodeInt32: __hashId forKey: @"hashId"];
  }
  if (__error_isset)
  {
    [encoder encodeInt: __error forKey: @"error"];
  }
  if (__protocolConfiguration_isset)
  {
    [encoder encodeObject: __protocolConfiguration forKey: @"protocolConfiguration"];
  }
  if (__serverVersion_isset)
  {
    [encoder encodeObject: __serverVersion forKey: @"serverVersion"];
  }
}

- (void) dealloc
{
  [__protocolConfiguration release];
  [__serverVersion release];
  [super dealloc];
}

- (BOOL) successful {
  return __successful;
}

- (void) setSuccessful: (BOOL) successful {
  __successful = successful;
  __successful_isset = YES;
}

- (BOOL) successfulIsSet {
  return __successful_isset;
}

- (void) unsetSuccessful {
  __successful_isset = NO;
}

- (int32_t) hashId {
  return __hashId;
}

- (void) setHashId: (int32_t) hashId {
  __hashId = hashId;
  __hashId_isset = YES;
}

- (BOOL) hashIdIsSet {
  return __hashId_isset;
}

- (void) unsetHashId {
  __hashId_isset = NO;
}

- (int) error {
  return __error;
}

- (void) setError: (int) error {
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  __error_isset = NO;
}

- (ThriftProtocolConfiguration *) protocolConfiguration {
  return [[__protocolConfiguration retain] autorelease];
}

- (void) setProtocolConfiguration: (ThriftProtocolConfiguration *) protocolConfiguration {
  [protocolConfiguration retain];
  [__protocolConfiguration release];
  __protocolConfiguration = protocolConfiguration;
  __protocolConfiguration_isset = YES;
}

- (BOOL) protocolConfigurationIsSet {
  return __protocolConfiguration_isset;
}

- (void) unsetProtocolConfiguration {
  [__protocolConfiguration release];
  __protocolConfiguration = nil;
  __protocolConfiguration_isset = NO;
}

- (NSString *) serverVersion {
  return [[__serverVersion retain] autorelease];
}

- (void) setServerVersion: (NSString *) serverVersion {
  [serverVersion retain];
  [__serverVersion release];
  __serverVersion = serverVersion;
  __serverVersion_isset = YES;
}

- (BOOL) serverVersionIsSet {
  return __serverVersion_isset;
}

- (void) unsetServerVersion {
  [__serverVersion release];
  __serverVersion = nil;
  __serverVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccessful: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHashId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setError: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          ThriftProtocolConfiguration *fieldValue = [[ThriftProtocolConfiguration alloc] init];
          [fieldValue read: inProtocol];
          [self setProtocolConfiguration: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServerVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftConnectionResponse"];
  if (__successful_isset) {
    [outProtocol writeFieldBeginWithName: @"successful" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __successful];
    [outProtocol writeFieldEnd];
  }
  if (__hashId_isset) {
    [outProtocol writeFieldBeginWithName: @"hashId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hashId];
    [outProtocol writeFieldEnd];
  }
  if (__error_isset) {
    [outProtocol writeFieldBeginWithName: @"error" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __error];
    [outProtocol writeFieldEnd];
  }
  if (__protocolConfiguration_isset) {
    if (__protocolConfiguration != nil) {
      [outProtocol writeFieldBeginWithName: @"protocolConfiguration" type: TType_STRUCT fieldID: 4];
      [__protocolConfiguration write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serverVersion_isset) {
    if (__serverVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"serverVersion" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __serverVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftConnectionResponse("];
  [ms appendString: @"successful:"];
  [ms appendFormat: @"%i", __successful];
  [ms appendString: @",hashId:"];
  [ms appendFormat: @"%i", __hashId];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%i", __error];
  [ms appendString: @",protocolConfiguration:"];
  [ms appendFormat: @"%@", __protocolConfiguration];
  [ms appendString: @",serverVersion:"];
  [ms appendFormat: @"\"%@\"", __serverVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


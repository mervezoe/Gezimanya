/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "ThriftFlattenedEsObject.h"
#import "ThriftPluginListEntry.h"
#import "ThriftRoomVariable.h"

#import "ThriftCreateRoomRequest.h"


@implementation ThriftCreateRoomRequestConstants
+ (void) initialize {
}
@end

@implementation ThriftCreateRoomRequest

- (id) initWithZoneName: (NSString *) zoneName zoneId: (int32_t) zoneId roomName: (NSString *) roomName capacity: (int32_t) capacity password: (NSString *) password roomDescription: (NSString *) roomDescription persistent: (BOOL) persistent hidden: (BOOL) hidden receivingRoomListUpdates: (BOOL) receivingRoomListUpdates receivingRoomAttributeUpdates: (BOOL) receivingRoomAttributeUpdates receivingUserListUpdates: (BOOL) receivingUserListUpdates receivingUserVariableUpdates: (BOOL) receivingUserVariableUpdates receivingRoomVariableUpdates: (BOOL) receivingRoomVariableUpdates receivingVideoEvents: (BOOL) receivingVideoEvents nonOperatorUpdateAllowed: (BOOL) nonOperatorUpdateAllowed nonOperatorVariableUpdateAllowed: (BOOL) nonOperatorVariableUpdateAllowed createOrJoinRoom: (BOOL) createOrJoinRoom plugins: (NSArray *) plugins variables: (NSArray *) variables usingLanguageFilter: (BOOL) usingLanguageFilter languageFilterSpecified: (BOOL) languageFilterSpecified languageFilterName: (NSString *) languageFilterName languageFilterDeliverMessageOnFailure: (BOOL) languageFilterDeliverMessageOnFailure languageFilterFailuresBeforeKick: (int32_t) languageFilterFailuresBeforeKick languageFilterKicksBeforeBan: (int32_t) languageFilterKicksBeforeBan languageFilterBanDuration: (int32_t) languageFilterBanDuration languageFilterResetAfterKick: (BOOL) languageFilterResetAfterKick usingFloodingFilter: (BOOL) usingFloodingFilter floodingFilterSpecified: (BOOL) floodingFilterSpecified floodingFilterName: (NSString *) floodingFilterName floodingFilterFailuresBeforeKick: (int32_t) floodingFilterFailuresBeforeKick floodingFilterKicksBeforeBan: (int32_t) floodingFilterKicksBeforeBan floodingFilterBanDuration: (int32_t) floodingFilterBanDuration floodingFilterResetAfterKick: (BOOL) floodingFilterResetAfterKick
{
  self = [super init];
  __zoneName = [zoneName retain];
  __zoneName_isset = YES;
  __zoneId = zoneId;
  __zoneId_isset = YES;
  __roomName = [roomName retain];
  __roomName_isset = YES;
  __capacity = capacity;
  __capacity_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  __roomDescription = [roomDescription retain];
  __roomDescription_isset = YES;
  __persistent = persistent;
  __persistent_isset = YES;
  __hidden = hidden;
  __hidden_isset = YES;
  __receivingRoomListUpdates = receivingRoomListUpdates;
  __receivingRoomListUpdates_isset = YES;
  __receivingRoomAttributeUpdates = receivingRoomAttributeUpdates;
  __receivingRoomAttributeUpdates_isset = YES;
  __receivingUserListUpdates = receivingUserListUpdates;
  __receivingUserListUpdates_isset = YES;
  __receivingUserVariableUpdates = receivingUserVariableUpdates;
  __receivingUserVariableUpdates_isset = YES;
  __receivingRoomVariableUpdates = receivingRoomVariableUpdates;
  __receivingRoomVariableUpdates_isset = YES;
  __receivingVideoEvents = receivingVideoEvents;
  __receivingVideoEvents_isset = YES;
  __nonOperatorUpdateAllowed = nonOperatorUpdateAllowed;
  __nonOperatorUpdateAllowed_isset = YES;
  __nonOperatorVariableUpdateAllowed = nonOperatorVariableUpdateAllowed;
  __nonOperatorVariableUpdateAllowed_isset = YES;
  __createOrJoinRoom = createOrJoinRoom;
  __createOrJoinRoom_isset = YES;
  __plugins = [plugins retain];
  __plugins_isset = YES;
  __variables = [variables retain];
  __variables_isset = YES;
  __usingLanguageFilter = usingLanguageFilter;
  __usingLanguageFilter_isset = YES;
  __languageFilterSpecified = languageFilterSpecified;
  __languageFilterSpecified_isset = YES;
  __languageFilterName = [languageFilterName retain];
  __languageFilterName_isset = YES;
  __languageFilterDeliverMessageOnFailure = languageFilterDeliverMessageOnFailure;
  __languageFilterDeliverMessageOnFailure_isset = YES;
  __languageFilterFailuresBeforeKick = languageFilterFailuresBeforeKick;
  __languageFilterFailuresBeforeKick_isset = YES;
  __languageFilterKicksBeforeBan = languageFilterKicksBeforeBan;
  __languageFilterKicksBeforeBan_isset = YES;
  __languageFilterBanDuration = languageFilterBanDuration;
  __languageFilterBanDuration_isset = YES;
  __languageFilterResetAfterKick = languageFilterResetAfterKick;
  __languageFilterResetAfterKick_isset = YES;
  __usingFloodingFilter = usingFloodingFilter;
  __usingFloodingFilter_isset = YES;
  __floodingFilterSpecified = floodingFilterSpecified;
  __floodingFilterSpecified_isset = YES;
  __floodingFilterName = [floodingFilterName retain];
  __floodingFilterName_isset = YES;
  __floodingFilterFailuresBeforeKick = floodingFilterFailuresBeforeKick;
  __floodingFilterFailuresBeforeKick_isset = YES;
  __floodingFilterKicksBeforeBan = floodingFilterKicksBeforeBan;
  __floodingFilterKicksBeforeBan_isset = YES;
  __floodingFilterBanDuration = floodingFilterBanDuration;
  __floodingFilterBanDuration_isset = YES;
  __floodingFilterResetAfterKick = floodingFilterResetAfterKick;
  __floodingFilterResetAfterKick_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"zoneName"])
  {
    __zoneName = [[decoder decodeObjectForKey: @"zoneName"] retain];
    __zoneName_isset = YES;
  }
  if ([decoder containsValueForKey: @"zoneId"])
  {
    __zoneId = [decoder decodeInt32ForKey: @"zoneId"];
    __zoneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomName"])
  {
    __roomName = [[decoder decodeObjectForKey: @"roomName"] retain];
    __roomName_isset = YES;
  }
  if ([decoder containsValueForKey: @"capacity"])
  {
    __capacity = [decoder decodeInt32ForKey: @"capacity"];
    __capacity_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomDescription"])
  {
    __roomDescription = [[decoder decodeObjectForKey: @"roomDescription"] retain];
    __roomDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"persistent"])
  {
    __persistent = [decoder decodeBoolForKey: @"persistent"];
    __persistent_isset = YES;
  }
  if ([decoder containsValueForKey: @"hidden"])
  {
    __hidden = [decoder decodeBoolForKey: @"hidden"];
    __hidden_isset = YES;
  }
  if ([decoder containsValueForKey: @"receivingRoomListUpdates"])
  {
    __receivingRoomListUpdates = [decoder decodeBoolForKey: @"receivingRoomListUpdates"];
    __receivingRoomListUpdates_isset = YES;
  }
  if ([decoder containsValueForKey: @"receivingRoomAttributeUpdates"])
  {
    __receivingRoomAttributeUpdates = [decoder decodeBoolForKey: @"receivingRoomAttributeUpdates"];
    __receivingRoomAttributeUpdates_isset = YES;
  }
  if ([decoder containsValueForKey: @"receivingUserListUpdates"])
  {
    __receivingUserListUpdates = [decoder decodeBoolForKey: @"receivingUserListUpdates"];
    __receivingUserListUpdates_isset = YES;
  }
  if ([decoder containsValueForKey: @"receivingUserVariableUpdates"])
  {
    __receivingUserVariableUpdates = [decoder decodeBoolForKey: @"receivingUserVariableUpdates"];
    __receivingUserVariableUpdates_isset = YES;
  }
  if ([decoder containsValueForKey: @"receivingRoomVariableUpdates"])
  {
    __receivingRoomVariableUpdates = [decoder decodeBoolForKey: @"receivingRoomVariableUpdates"];
    __receivingRoomVariableUpdates_isset = YES;
  }
  if ([decoder containsValueForKey: @"receivingVideoEvents"])
  {
    __receivingVideoEvents = [decoder decodeBoolForKey: @"receivingVideoEvents"];
    __receivingVideoEvents_isset = YES;
  }
  if ([decoder containsValueForKey: @"nonOperatorUpdateAllowed"])
  {
    __nonOperatorUpdateAllowed = [decoder decodeBoolForKey: @"nonOperatorUpdateAllowed"];
    __nonOperatorUpdateAllowed_isset = YES;
  }
  if ([decoder containsValueForKey: @"nonOperatorVariableUpdateAllowed"])
  {
    __nonOperatorVariableUpdateAllowed = [decoder decodeBoolForKey: @"nonOperatorVariableUpdateAllowed"];
    __nonOperatorVariableUpdateAllowed_isset = YES;
  }
  if ([decoder containsValueForKey: @"createOrJoinRoom"])
  {
    __createOrJoinRoom = [decoder decodeBoolForKey: @"createOrJoinRoom"];
    __createOrJoinRoom_isset = YES;
  }
  if ([decoder containsValueForKey: @"plugins"])
  {
    __plugins = [[decoder decodeObjectForKey: @"plugins"] retain];
    __plugins_isset = YES;
  }
  if ([decoder containsValueForKey: @"variables"])
  {
    __variables = [[decoder decodeObjectForKey: @"variables"] retain];
    __variables_isset = YES;
  }
  if ([decoder containsValueForKey: @"usingLanguageFilter"])
  {
    __usingLanguageFilter = [decoder decodeBoolForKey: @"usingLanguageFilter"];
    __usingLanguageFilter_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterSpecified"])
  {
    __languageFilterSpecified = [decoder decodeBoolForKey: @"languageFilterSpecified"];
    __languageFilterSpecified_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterName"])
  {
    __languageFilterName = [[decoder decodeObjectForKey: @"languageFilterName"] retain];
    __languageFilterName_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterDeliverMessageOnFailure"])
  {
    __languageFilterDeliverMessageOnFailure = [decoder decodeBoolForKey: @"languageFilterDeliverMessageOnFailure"];
    __languageFilterDeliverMessageOnFailure_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterFailuresBeforeKick"])
  {
    __languageFilterFailuresBeforeKick = [decoder decodeInt32ForKey: @"languageFilterFailuresBeforeKick"];
    __languageFilterFailuresBeforeKick_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterKicksBeforeBan"])
  {
    __languageFilterKicksBeforeBan = [decoder decodeInt32ForKey: @"languageFilterKicksBeforeBan"];
    __languageFilterKicksBeforeBan_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterBanDuration"])
  {
    __languageFilterBanDuration = [decoder decodeInt32ForKey: @"languageFilterBanDuration"];
    __languageFilterBanDuration_isset = YES;
  }
  if ([decoder containsValueForKey: @"languageFilterResetAfterKick"])
  {
    __languageFilterResetAfterKick = [decoder decodeBoolForKey: @"languageFilterResetAfterKick"];
    __languageFilterResetAfterKick_isset = YES;
  }
  if ([decoder containsValueForKey: @"usingFloodingFilter"])
  {
    __usingFloodingFilter = [decoder decodeBoolForKey: @"usingFloodingFilter"];
    __usingFloodingFilter_isset = YES;
  }
  if ([decoder containsValueForKey: @"floodingFilterSpecified"])
  {
    __floodingFilterSpecified = [decoder decodeBoolForKey: @"floodingFilterSpecified"];
    __floodingFilterSpecified_isset = YES;
  }
  if ([decoder containsValueForKey: @"floodingFilterName"])
  {
    __floodingFilterName = [[decoder decodeObjectForKey: @"floodingFilterName"] retain];
    __floodingFilterName_isset = YES;
  }
  if ([decoder containsValueForKey: @"floodingFilterFailuresBeforeKick"])
  {
    __floodingFilterFailuresBeforeKick = [decoder decodeInt32ForKey: @"floodingFilterFailuresBeforeKick"];
    __floodingFilterFailuresBeforeKick_isset = YES;
  }
  if ([decoder containsValueForKey: @"floodingFilterKicksBeforeBan"])
  {
    __floodingFilterKicksBeforeBan = [decoder decodeInt32ForKey: @"floodingFilterKicksBeforeBan"];
    __floodingFilterKicksBeforeBan_isset = YES;
  }
  if ([decoder containsValueForKey: @"floodingFilterBanDuration"])
  {
    __floodingFilterBanDuration = [decoder decodeInt32ForKey: @"floodingFilterBanDuration"];
    __floodingFilterBanDuration_isset = YES;
  }
  if ([decoder containsValueForKey: @"floodingFilterResetAfterKick"])
  {
    __floodingFilterResetAfterKick = [decoder decodeBoolForKey: @"floodingFilterResetAfterKick"];
    __floodingFilterResetAfterKick_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__zoneName_isset)
  {
    [encoder encodeObject: __zoneName forKey: @"zoneName"];
  }
  if (__zoneId_isset)
  {
    [encoder encodeInt32: __zoneId forKey: @"zoneId"];
  }
  if (__roomName_isset)
  {
    [encoder encodeObject: __roomName forKey: @"roomName"];
  }
  if (__capacity_isset)
  {
    [encoder encodeInt32: __capacity forKey: @"capacity"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__roomDescription_isset)
  {
    [encoder encodeObject: __roomDescription forKey: @"roomDescription"];
  }
  if (__persistent_isset)
  {
    [encoder encodeBool: __persistent forKey: @"persistent"];
  }
  if (__hidden_isset)
  {
    [encoder encodeBool: __hidden forKey: @"hidden"];
  }
  if (__receivingRoomListUpdates_isset)
  {
    [encoder encodeBool: __receivingRoomListUpdates forKey: @"receivingRoomListUpdates"];
  }
  if (__receivingRoomAttributeUpdates_isset)
  {
    [encoder encodeBool: __receivingRoomAttributeUpdates forKey: @"receivingRoomAttributeUpdates"];
  }
  if (__receivingUserListUpdates_isset)
  {
    [encoder encodeBool: __receivingUserListUpdates forKey: @"receivingUserListUpdates"];
  }
  if (__receivingUserVariableUpdates_isset)
  {
    [encoder encodeBool: __receivingUserVariableUpdates forKey: @"receivingUserVariableUpdates"];
  }
  if (__receivingRoomVariableUpdates_isset)
  {
    [encoder encodeBool: __receivingRoomVariableUpdates forKey: @"receivingRoomVariableUpdates"];
  }
  if (__receivingVideoEvents_isset)
  {
    [encoder encodeBool: __receivingVideoEvents forKey: @"receivingVideoEvents"];
  }
  if (__nonOperatorUpdateAllowed_isset)
  {
    [encoder encodeBool: __nonOperatorUpdateAllowed forKey: @"nonOperatorUpdateAllowed"];
  }
  if (__nonOperatorVariableUpdateAllowed_isset)
  {
    [encoder encodeBool: __nonOperatorVariableUpdateAllowed forKey: @"nonOperatorVariableUpdateAllowed"];
  }
  if (__createOrJoinRoom_isset)
  {
    [encoder encodeBool: __createOrJoinRoom forKey: @"createOrJoinRoom"];
  }
  if (__plugins_isset)
  {
    [encoder encodeObject: __plugins forKey: @"plugins"];
  }
  if (__variables_isset)
  {
    [encoder encodeObject: __variables forKey: @"variables"];
  }
  if (__usingLanguageFilter_isset)
  {
    [encoder encodeBool: __usingLanguageFilter forKey: @"usingLanguageFilter"];
  }
  if (__languageFilterSpecified_isset)
  {
    [encoder encodeBool: __languageFilterSpecified forKey: @"languageFilterSpecified"];
  }
  if (__languageFilterName_isset)
  {
    [encoder encodeObject: __languageFilterName forKey: @"languageFilterName"];
  }
  if (__languageFilterDeliverMessageOnFailure_isset)
  {
    [encoder encodeBool: __languageFilterDeliverMessageOnFailure forKey: @"languageFilterDeliverMessageOnFailure"];
  }
  if (__languageFilterFailuresBeforeKick_isset)
  {
    [encoder encodeInt32: __languageFilterFailuresBeforeKick forKey: @"languageFilterFailuresBeforeKick"];
  }
  if (__languageFilterKicksBeforeBan_isset)
  {
    [encoder encodeInt32: __languageFilterKicksBeforeBan forKey: @"languageFilterKicksBeforeBan"];
  }
  if (__languageFilterBanDuration_isset)
  {
    [encoder encodeInt32: __languageFilterBanDuration forKey: @"languageFilterBanDuration"];
  }
  if (__languageFilterResetAfterKick_isset)
  {
    [encoder encodeBool: __languageFilterResetAfterKick forKey: @"languageFilterResetAfterKick"];
  }
  if (__usingFloodingFilter_isset)
  {
    [encoder encodeBool: __usingFloodingFilter forKey: @"usingFloodingFilter"];
  }
  if (__floodingFilterSpecified_isset)
  {
    [encoder encodeBool: __floodingFilterSpecified forKey: @"floodingFilterSpecified"];
  }
  if (__floodingFilterName_isset)
  {
    [encoder encodeObject: __floodingFilterName forKey: @"floodingFilterName"];
  }
  if (__floodingFilterFailuresBeforeKick_isset)
  {
    [encoder encodeInt32: __floodingFilterFailuresBeforeKick forKey: @"floodingFilterFailuresBeforeKick"];
  }
  if (__floodingFilterKicksBeforeBan_isset)
  {
    [encoder encodeInt32: __floodingFilterKicksBeforeBan forKey: @"floodingFilterKicksBeforeBan"];
  }
  if (__floodingFilterBanDuration_isset)
  {
    [encoder encodeInt32: __floodingFilterBanDuration forKey: @"floodingFilterBanDuration"];
  }
  if (__floodingFilterResetAfterKick_isset)
  {
    [encoder encodeBool: __floodingFilterResetAfterKick forKey: @"floodingFilterResetAfterKick"];
  }
}

- (void) dealloc
{
  [__zoneName release];
  [__roomName release];
  [__password release];
  [__roomDescription release];
  [__plugins release];
  [__variables release];
  [__languageFilterName release];
  [__floodingFilterName release];
  [super dealloc];
}

- (NSString *) zoneName {
  return [[__zoneName retain] autorelease];
}

- (void) setZoneName: (NSString *) zoneName {
  [zoneName retain];
  [__zoneName release];
  __zoneName = zoneName;
  __zoneName_isset = YES;
}

- (BOOL) zoneNameIsSet {
  return __zoneName_isset;
}

- (void) unsetZoneName {
  [__zoneName release];
  __zoneName = nil;
  __zoneName_isset = NO;
}

- (int32_t) zoneId {
  return __zoneId;
}

- (void) setZoneId: (int32_t) zoneId {
  __zoneId = zoneId;
  __zoneId_isset = YES;
}

- (BOOL) zoneIdIsSet {
  return __zoneId_isset;
}

- (void) unsetZoneId {
  __zoneId_isset = NO;
}

- (NSString *) roomName {
  return [[__roomName retain] autorelease];
}

- (void) setRoomName: (NSString *) roomName {
  [roomName retain];
  [__roomName release];
  __roomName = roomName;
  __roomName_isset = YES;
}

- (BOOL) roomNameIsSet {
  return __roomName_isset;
}

- (void) unsetRoomName {
  [__roomName release];
  __roomName = nil;
  __roomName_isset = NO;
}

- (int32_t) capacity {
  return __capacity;
}

- (void) setCapacity: (int32_t) capacity {
  __capacity = capacity;
  __capacity_isset = YES;
}

- (BOOL) capacityIsSet {
  return __capacity_isset;
}

- (void) unsetCapacity {
  __capacity_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) roomDescription {
  return [[__roomDescription retain] autorelease];
}

- (void) setRoomDescription: (NSString *) roomDescription {
  [roomDescription retain];
  [__roomDescription release];
  __roomDescription = roomDescription;
  __roomDescription_isset = YES;
}

- (BOOL) roomDescriptionIsSet {
  return __roomDescription_isset;
}

- (void) unsetRoomDescription {
  [__roomDescription release];
  __roomDescription = nil;
  __roomDescription_isset = NO;
}

- (BOOL) persistent {
  return __persistent;
}

- (void) setPersistent: (BOOL) persistent {
  __persistent = persistent;
  __persistent_isset = YES;
}

- (BOOL) persistentIsSet {
  return __persistent_isset;
}

- (void) unsetPersistent {
  __persistent_isset = NO;
}

- (BOOL) hidden {
  return __hidden;
}

- (void) setHidden: (BOOL) hidden {
  __hidden = hidden;
  __hidden_isset = YES;
}

- (BOOL) hiddenIsSet {
  return __hidden_isset;
}

- (void) unsetHidden {
  __hidden_isset = NO;
}

- (BOOL) receivingRoomListUpdates {
  return __receivingRoomListUpdates;
}

- (void) setReceivingRoomListUpdates: (BOOL) receivingRoomListUpdates {
  __receivingRoomListUpdates = receivingRoomListUpdates;
  __receivingRoomListUpdates_isset = YES;
}

- (BOOL) receivingRoomListUpdatesIsSet {
  return __receivingRoomListUpdates_isset;
}

- (void) unsetReceivingRoomListUpdates {
  __receivingRoomListUpdates_isset = NO;
}

- (BOOL) receivingRoomAttributeUpdates {
  return __receivingRoomAttributeUpdates;
}

- (void) setReceivingRoomAttributeUpdates: (BOOL) receivingRoomAttributeUpdates {
  __receivingRoomAttributeUpdates = receivingRoomAttributeUpdates;
  __receivingRoomAttributeUpdates_isset = YES;
}

- (BOOL) receivingRoomAttributeUpdatesIsSet {
  return __receivingRoomAttributeUpdates_isset;
}

- (void) unsetReceivingRoomAttributeUpdates {
  __receivingRoomAttributeUpdates_isset = NO;
}

- (BOOL) receivingUserListUpdates {
  return __receivingUserListUpdates;
}

- (void) setReceivingUserListUpdates: (BOOL) receivingUserListUpdates {
  __receivingUserListUpdates = receivingUserListUpdates;
  __receivingUserListUpdates_isset = YES;
}

- (BOOL) receivingUserListUpdatesIsSet {
  return __receivingUserListUpdates_isset;
}

- (void) unsetReceivingUserListUpdates {
  __receivingUserListUpdates_isset = NO;
}

- (BOOL) receivingUserVariableUpdates {
  return __receivingUserVariableUpdates;
}

- (void) setReceivingUserVariableUpdates: (BOOL) receivingUserVariableUpdates {
  __receivingUserVariableUpdates = receivingUserVariableUpdates;
  __receivingUserVariableUpdates_isset = YES;
}

- (BOOL) receivingUserVariableUpdatesIsSet {
  return __receivingUserVariableUpdates_isset;
}

- (void) unsetReceivingUserVariableUpdates {
  __receivingUserVariableUpdates_isset = NO;
}

- (BOOL) receivingRoomVariableUpdates {
  return __receivingRoomVariableUpdates;
}

- (void) setReceivingRoomVariableUpdates: (BOOL) receivingRoomVariableUpdates {
  __receivingRoomVariableUpdates = receivingRoomVariableUpdates;
  __receivingRoomVariableUpdates_isset = YES;
}

- (BOOL) receivingRoomVariableUpdatesIsSet {
  return __receivingRoomVariableUpdates_isset;
}

- (void) unsetReceivingRoomVariableUpdates {
  __receivingRoomVariableUpdates_isset = NO;
}

- (BOOL) receivingVideoEvents {
  return __receivingVideoEvents;
}

- (void) setReceivingVideoEvents: (BOOL) receivingVideoEvents {
  __receivingVideoEvents = receivingVideoEvents;
  __receivingVideoEvents_isset = YES;
}

- (BOOL) receivingVideoEventsIsSet {
  return __receivingVideoEvents_isset;
}

- (void) unsetReceivingVideoEvents {
  __receivingVideoEvents_isset = NO;
}

- (BOOL) nonOperatorUpdateAllowed {
  return __nonOperatorUpdateAllowed;
}

- (void) setNonOperatorUpdateAllowed: (BOOL) nonOperatorUpdateAllowed {
  __nonOperatorUpdateAllowed = nonOperatorUpdateAllowed;
  __nonOperatorUpdateAllowed_isset = YES;
}

- (BOOL) nonOperatorUpdateAllowedIsSet {
  return __nonOperatorUpdateAllowed_isset;
}

- (void) unsetNonOperatorUpdateAllowed {
  __nonOperatorUpdateAllowed_isset = NO;
}

- (BOOL) nonOperatorVariableUpdateAllowed {
  return __nonOperatorVariableUpdateAllowed;
}

- (void) setNonOperatorVariableUpdateAllowed: (BOOL) nonOperatorVariableUpdateAllowed {
  __nonOperatorVariableUpdateAllowed = nonOperatorVariableUpdateAllowed;
  __nonOperatorVariableUpdateAllowed_isset = YES;
}

- (BOOL) nonOperatorVariableUpdateAllowedIsSet {
  return __nonOperatorVariableUpdateAllowed_isset;
}

- (void) unsetNonOperatorVariableUpdateAllowed {
  __nonOperatorVariableUpdateAllowed_isset = NO;
}

- (BOOL) createOrJoinRoom {
  return __createOrJoinRoom;
}

- (void) setCreateOrJoinRoom: (BOOL) createOrJoinRoom {
  __createOrJoinRoom = createOrJoinRoom;
  __createOrJoinRoom_isset = YES;
}

- (BOOL) createOrJoinRoomIsSet {
  return __createOrJoinRoom_isset;
}

- (void) unsetCreateOrJoinRoom {
  __createOrJoinRoom_isset = NO;
}

- (NSArray *) plugins {
  return [[__plugins retain] autorelease];
}

- (void) setPlugins: (NSArray *) plugins {
  [plugins retain];
  [__plugins release];
  __plugins = plugins;
  __plugins_isset = YES;
}

- (BOOL) pluginsIsSet {
  return __plugins_isset;
}

- (void) unsetPlugins {
  [__plugins release];
  __plugins = nil;
  __plugins_isset = NO;
}

- (NSArray *) variables {
  return [[__variables retain] autorelease];
}

- (void) setVariables: (NSArray *) variables {
  [variables retain];
  [__variables release];
  __variables = variables;
  __variables_isset = YES;
}

- (BOOL) variablesIsSet {
  return __variables_isset;
}

- (void) unsetVariables {
  [__variables release];
  __variables = nil;
  __variables_isset = NO;
}

- (BOOL) usingLanguageFilter {
  return __usingLanguageFilter;
}

- (void) setUsingLanguageFilter: (BOOL) usingLanguageFilter {
  __usingLanguageFilter = usingLanguageFilter;
  __usingLanguageFilter_isset = YES;
}

- (BOOL) usingLanguageFilterIsSet {
  return __usingLanguageFilter_isset;
}

- (void) unsetUsingLanguageFilter {
  __usingLanguageFilter_isset = NO;
}

- (BOOL) languageFilterSpecified {
  return __languageFilterSpecified;
}

- (void) setLanguageFilterSpecified: (BOOL) languageFilterSpecified {
  __languageFilterSpecified = languageFilterSpecified;
  __languageFilterSpecified_isset = YES;
}

- (BOOL) languageFilterSpecifiedIsSet {
  return __languageFilterSpecified_isset;
}

- (void) unsetLanguageFilterSpecified {
  __languageFilterSpecified_isset = NO;
}

- (NSString *) languageFilterName {
  return [[__languageFilterName retain] autorelease];
}

- (void) setLanguageFilterName: (NSString *) languageFilterName {
  [languageFilterName retain];
  [__languageFilterName release];
  __languageFilterName = languageFilterName;
  __languageFilterName_isset = YES;
}

- (BOOL) languageFilterNameIsSet {
  return __languageFilterName_isset;
}

- (void) unsetLanguageFilterName {
  [__languageFilterName release];
  __languageFilterName = nil;
  __languageFilterName_isset = NO;
}

- (BOOL) languageFilterDeliverMessageOnFailure {
  return __languageFilterDeliverMessageOnFailure;
}

- (void) setLanguageFilterDeliverMessageOnFailure: (BOOL) languageFilterDeliverMessageOnFailure {
  __languageFilterDeliverMessageOnFailure = languageFilterDeliverMessageOnFailure;
  __languageFilterDeliverMessageOnFailure_isset = YES;
}

- (BOOL) languageFilterDeliverMessageOnFailureIsSet {
  return __languageFilterDeliverMessageOnFailure_isset;
}

- (void) unsetLanguageFilterDeliverMessageOnFailure {
  __languageFilterDeliverMessageOnFailure_isset = NO;
}

- (int32_t) languageFilterFailuresBeforeKick {
  return __languageFilterFailuresBeforeKick;
}

- (void) setLanguageFilterFailuresBeforeKick: (int32_t) languageFilterFailuresBeforeKick {
  __languageFilterFailuresBeforeKick = languageFilterFailuresBeforeKick;
  __languageFilterFailuresBeforeKick_isset = YES;
}

- (BOOL) languageFilterFailuresBeforeKickIsSet {
  return __languageFilterFailuresBeforeKick_isset;
}

- (void) unsetLanguageFilterFailuresBeforeKick {
  __languageFilterFailuresBeforeKick_isset = NO;
}

- (int32_t) languageFilterKicksBeforeBan {
  return __languageFilterKicksBeforeBan;
}

- (void) setLanguageFilterKicksBeforeBan: (int32_t) languageFilterKicksBeforeBan {
  __languageFilterKicksBeforeBan = languageFilterKicksBeforeBan;
  __languageFilterKicksBeforeBan_isset = YES;
}

- (BOOL) languageFilterKicksBeforeBanIsSet {
  return __languageFilterKicksBeforeBan_isset;
}

- (void) unsetLanguageFilterKicksBeforeBan {
  __languageFilterKicksBeforeBan_isset = NO;
}

- (int32_t) languageFilterBanDuration {
  return __languageFilterBanDuration;
}

- (void) setLanguageFilterBanDuration: (int32_t) languageFilterBanDuration {
  __languageFilterBanDuration = languageFilterBanDuration;
  __languageFilterBanDuration_isset = YES;
}

- (BOOL) languageFilterBanDurationIsSet {
  return __languageFilterBanDuration_isset;
}

- (void) unsetLanguageFilterBanDuration {
  __languageFilterBanDuration_isset = NO;
}

- (BOOL) languageFilterResetAfterKick {
  return __languageFilterResetAfterKick;
}

- (void) setLanguageFilterResetAfterKick: (BOOL) languageFilterResetAfterKick {
  __languageFilterResetAfterKick = languageFilterResetAfterKick;
  __languageFilterResetAfterKick_isset = YES;
}

- (BOOL) languageFilterResetAfterKickIsSet {
  return __languageFilterResetAfterKick_isset;
}

- (void) unsetLanguageFilterResetAfterKick {
  __languageFilterResetAfterKick_isset = NO;
}

- (BOOL) usingFloodingFilter {
  return __usingFloodingFilter;
}

- (void) setUsingFloodingFilter: (BOOL) usingFloodingFilter {
  __usingFloodingFilter = usingFloodingFilter;
  __usingFloodingFilter_isset = YES;
}

- (BOOL) usingFloodingFilterIsSet {
  return __usingFloodingFilter_isset;
}

- (void) unsetUsingFloodingFilter {
  __usingFloodingFilter_isset = NO;
}

- (BOOL) floodingFilterSpecified {
  return __floodingFilterSpecified;
}

- (void) setFloodingFilterSpecified: (BOOL) floodingFilterSpecified {
  __floodingFilterSpecified = floodingFilterSpecified;
  __floodingFilterSpecified_isset = YES;
}

- (BOOL) floodingFilterSpecifiedIsSet {
  return __floodingFilterSpecified_isset;
}

- (void) unsetFloodingFilterSpecified {
  __floodingFilterSpecified_isset = NO;
}

- (NSString *) floodingFilterName {
  return [[__floodingFilterName retain] autorelease];
}

- (void) setFloodingFilterName: (NSString *) floodingFilterName {
  [floodingFilterName retain];
  [__floodingFilterName release];
  __floodingFilterName = floodingFilterName;
  __floodingFilterName_isset = YES;
}

- (BOOL) floodingFilterNameIsSet {
  return __floodingFilterName_isset;
}

- (void) unsetFloodingFilterName {
  [__floodingFilterName release];
  __floodingFilterName = nil;
  __floodingFilterName_isset = NO;
}

- (int32_t) floodingFilterFailuresBeforeKick {
  return __floodingFilterFailuresBeforeKick;
}

- (void) setFloodingFilterFailuresBeforeKick: (int32_t) floodingFilterFailuresBeforeKick {
  __floodingFilterFailuresBeforeKick = floodingFilterFailuresBeforeKick;
  __floodingFilterFailuresBeforeKick_isset = YES;
}

- (BOOL) floodingFilterFailuresBeforeKickIsSet {
  return __floodingFilterFailuresBeforeKick_isset;
}

- (void) unsetFloodingFilterFailuresBeforeKick {
  __floodingFilterFailuresBeforeKick_isset = NO;
}

- (int32_t) floodingFilterKicksBeforeBan {
  return __floodingFilterKicksBeforeBan;
}

- (void) setFloodingFilterKicksBeforeBan: (int32_t) floodingFilterKicksBeforeBan {
  __floodingFilterKicksBeforeBan = floodingFilterKicksBeforeBan;
  __floodingFilterKicksBeforeBan_isset = YES;
}

- (BOOL) floodingFilterKicksBeforeBanIsSet {
  return __floodingFilterKicksBeforeBan_isset;
}

- (void) unsetFloodingFilterKicksBeforeBan {
  __floodingFilterKicksBeforeBan_isset = NO;
}

- (int32_t) floodingFilterBanDuration {
  return __floodingFilterBanDuration;
}

- (void) setFloodingFilterBanDuration: (int32_t) floodingFilterBanDuration {
  __floodingFilterBanDuration = floodingFilterBanDuration;
  __floodingFilterBanDuration_isset = YES;
}

- (BOOL) floodingFilterBanDurationIsSet {
  return __floodingFilterBanDuration_isset;
}

- (void) unsetFloodingFilterBanDuration {
  __floodingFilterBanDuration_isset = NO;
}

- (BOOL) floodingFilterResetAfterKick {
  return __floodingFilterResetAfterKick;
}

- (void) setFloodingFilterResetAfterKick: (BOOL) floodingFilterResetAfterKick {
  __floodingFilterResetAfterKick = floodingFilterResetAfterKick;
  __floodingFilterResetAfterKick_isset = YES;
}

- (BOOL) floodingFilterResetAfterKickIsSet {
  return __floodingFilterResetAfterKick_isset;
}

- (void) unsetFloodingFilterResetAfterKick {
  __floodingFilterResetAfterKick_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setZoneName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZoneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPersistent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHidden: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReceivingRoomListUpdates: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReceivingRoomAttributeUpdates: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReceivingUserListUpdates: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReceivingUserVariableUpdates: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReceivingRoomVariableUpdates: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReceivingVideoEvents: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNonOperatorUpdateAllowed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNonOperatorVariableUpdateAllowed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCreateOrJoinRoom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ThriftPluginListEntry *_elem2 = [[ThriftPluginListEntry alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setPlugins: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            ThriftRoomVariable *_elem5 = [[ThriftRoomVariable alloc] init];
            [_elem5 read: inProtocol];
            [fieldValue addObject: _elem5];
            [_elem5 release];
          }
          [inProtocol readListEnd];
          [self setVariables: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUsingLanguageFilter: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setLanguageFilterSpecified: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguageFilterName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setLanguageFilterDeliverMessageOnFailure: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLanguageFilterFailuresBeforeKick: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLanguageFilterKicksBeforeBan: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLanguageFilterBanDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setLanguageFilterResetAfterKick: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUsingFloodingFilter: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFloodingFilterSpecified: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFloodingFilterName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFloodingFilterFailuresBeforeKick: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFloodingFilterKicksBeforeBan: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFloodingFilterBanDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFloodingFilterResetAfterKick: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftCreateRoomRequest"];
  if (__zoneName_isset) {
    if (__zoneName != nil) {
      [outProtocol writeFieldBeginWithName: @"zoneName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __zoneName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zoneId_isset) {
    [outProtocol writeFieldBeginWithName: @"zoneId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __zoneId];
    [outProtocol writeFieldEnd];
  }
  if (__roomName_isset) {
    if (__roomName != nil) {
      [outProtocol writeFieldBeginWithName: @"roomName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __roomName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__capacity_isset) {
    [outProtocol writeFieldBeginWithName: @"capacity" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __capacity];
    [outProtocol writeFieldEnd];
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomDescription_isset) {
    if (__roomDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"roomDescription" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __roomDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__persistent_isset) {
    [outProtocol writeFieldBeginWithName: @"persistent" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __persistent];
    [outProtocol writeFieldEnd];
  }
  if (__hidden_isset) {
    [outProtocol writeFieldBeginWithName: @"hidden" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __hidden];
    [outProtocol writeFieldEnd];
  }
  if (__receivingRoomListUpdates_isset) {
    [outProtocol writeFieldBeginWithName: @"receivingRoomListUpdates" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __receivingRoomListUpdates];
    [outProtocol writeFieldEnd];
  }
  if (__receivingRoomAttributeUpdates_isset) {
    [outProtocol writeFieldBeginWithName: @"receivingRoomAttributeUpdates" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __receivingRoomAttributeUpdates];
    [outProtocol writeFieldEnd];
  }
  if (__receivingUserListUpdates_isset) {
    [outProtocol writeFieldBeginWithName: @"receivingUserListUpdates" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __receivingUserListUpdates];
    [outProtocol writeFieldEnd];
  }
  if (__receivingUserVariableUpdates_isset) {
    [outProtocol writeFieldBeginWithName: @"receivingUserVariableUpdates" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __receivingUserVariableUpdates];
    [outProtocol writeFieldEnd];
  }
  if (__receivingRoomVariableUpdates_isset) {
    [outProtocol writeFieldBeginWithName: @"receivingRoomVariableUpdates" type: TType_BOOL fieldID: 13];
    [outProtocol writeBool: __receivingRoomVariableUpdates];
    [outProtocol writeFieldEnd];
  }
  if (__receivingVideoEvents_isset) {
    [outProtocol writeFieldBeginWithName: @"receivingVideoEvents" type: TType_BOOL fieldID: 14];
    [outProtocol writeBool: __receivingVideoEvents];
    [outProtocol writeFieldEnd];
  }
  if (__nonOperatorUpdateAllowed_isset) {
    [outProtocol writeFieldBeginWithName: @"nonOperatorUpdateAllowed" type: TType_BOOL fieldID: 15];
    [outProtocol writeBool: __nonOperatorUpdateAllowed];
    [outProtocol writeFieldEnd];
  }
  if (__nonOperatorVariableUpdateAllowed_isset) {
    [outProtocol writeFieldBeginWithName: @"nonOperatorVariableUpdateAllowed" type: TType_BOOL fieldID: 16];
    [outProtocol writeBool: __nonOperatorVariableUpdateAllowed];
    [outProtocol writeFieldEnd];
  }
  if (__createOrJoinRoom_isset) {
    [outProtocol writeFieldBeginWithName: @"createOrJoinRoom" type: TType_BOOL fieldID: 17];
    [outProtocol writeBool: __createOrJoinRoom];
    [outProtocol writeFieldEnd];
  }
  if (__plugins_isset) {
    if (__plugins != nil) {
      [outProtocol writeFieldBeginWithName: @"plugins" type: TType_LIST fieldID: 18];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__plugins count]];
        int i7;
        for (i7 = 0; i7 < [__plugins count]; i7++)
        {
          [[__plugins objectAtIndex: i7] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__variables_isset) {
    if (__variables != nil) {
      [outProtocol writeFieldBeginWithName: @"variables" type: TType_LIST fieldID: 19];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__variables count]];
        int i9;
        for (i9 = 0; i9 < [__variables count]; i9++)
        {
          [[__variables objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__usingLanguageFilter_isset) {
    [outProtocol writeFieldBeginWithName: @"usingLanguageFilter" type: TType_BOOL fieldID: 20];
    [outProtocol writeBool: __usingLanguageFilter];
    [outProtocol writeFieldEnd];
  }
  if (__languageFilterSpecified_isset) {
    [outProtocol writeFieldBeginWithName: @"languageFilterSpecified" type: TType_BOOL fieldID: 21];
    [outProtocol writeBool: __languageFilterSpecified];
    [outProtocol writeFieldEnd];
  }
  if (__languageFilterName_isset) {
    if (__languageFilterName != nil) {
      [outProtocol writeFieldBeginWithName: @"languageFilterName" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __languageFilterName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__languageFilterDeliverMessageOnFailure_isset) {
    [outProtocol writeFieldBeginWithName: @"languageFilterDeliverMessageOnFailure" type: TType_BOOL fieldID: 23];
    [outProtocol writeBool: __languageFilterDeliverMessageOnFailure];
    [outProtocol writeFieldEnd];
  }
  if (__languageFilterFailuresBeforeKick_isset) {
    [outProtocol writeFieldBeginWithName: @"languageFilterFailuresBeforeKick" type: TType_I32 fieldID: 24];
    [outProtocol writeI32: __languageFilterFailuresBeforeKick];
    [outProtocol writeFieldEnd];
  }
  if (__languageFilterKicksBeforeBan_isset) {
    [outProtocol writeFieldBeginWithName: @"languageFilterKicksBeforeBan" type: TType_I32 fieldID: 25];
    [outProtocol writeI32: __languageFilterKicksBeforeBan];
    [outProtocol writeFieldEnd];
  }
  if (__languageFilterBanDuration_isset) {
    [outProtocol writeFieldBeginWithName: @"languageFilterBanDuration" type: TType_I32 fieldID: 26];
    [outProtocol writeI32: __languageFilterBanDuration];
    [outProtocol writeFieldEnd];
  }
  if (__languageFilterResetAfterKick_isset) {
    [outProtocol writeFieldBeginWithName: @"languageFilterResetAfterKick" type: TType_BOOL fieldID: 27];
    [outProtocol writeBool: __languageFilterResetAfterKick];
    [outProtocol writeFieldEnd];
  }
  if (__usingFloodingFilter_isset) {
    [outProtocol writeFieldBeginWithName: @"usingFloodingFilter" type: TType_BOOL fieldID: 28];
    [outProtocol writeBool: __usingFloodingFilter];
    [outProtocol writeFieldEnd];
  }
  if (__floodingFilterSpecified_isset) {
    [outProtocol writeFieldBeginWithName: @"floodingFilterSpecified" type: TType_BOOL fieldID: 29];
    [outProtocol writeBool: __floodingFilterSpecified];
    [outProtocol writeFieldEnd];
  }
  if (__floodingFilterName_isset) {
    if (__floodingFilterName != nil) {
      [outProtocol writeFieldBeginWithName: @"floodingFilterName" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __floodingFilterName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__floodingFilterFailuresBeforeKick_isset) {
    [outProtocol writeFieldBeginWithName: @"floodingFilterFailuresBeforeKick" type: TType_I32 fieldID: 31];
    [outProtocol writeI32: __floodingFilterFailuresBeforeKick];
    [outProtocol writeFieldEnd];
  }
  if (__floodingFilterKicksBeforeBan_isset) {
    [outProtocol writeFieldBeginWithName: @"floodingFilterKicksBeforeBan" type: TType_I32 fieldID: 32];
    [outProtocol writeI32: __floodingFilterKicksBeforeBan];
    [outProtocol writeFieldEnd];
  }
  if (__floodingFilterBanDuration_isset) {
    [outProtocol writeFieldBeginWithName: @"floodingFilterBanDuration" type: TType_I32 fieldID: 33];
    [outProtocol writeI32: __floodingFilterBanDuration];
    [outProtocol writeFieldEnd];
  }
  if (__floodingFilterResetAfterKick_isset) {
    [outProtocol writeFieldBeginWithName: @"floodingFilterResetAfterKick" type: TType_BOOL fieldID: 34];
    [outProtocol writeBool: __floodingFilterResetAfterKick];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftCreateRoomRequest("];
  [ms appendString: @"zoneName:"];
  [ms appendFormat: @"\"%@\"", __zoneName];
  [ms appendString: @",zoneId:"];
  [ms appendFormat: @"%i", __zoneId];
  [ms appendString: @",roomName:"];
  [ms appendFormat: @"\"%@\"", __roomName];
  [ms appendString: @",capacity:"];
  [ms appendFormat: @"%i", __capacity];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",roomDescription:"];
  [ms appendFormat: @"\"%@\"", __roomDescription];
  [ms appendString: @",persistent:"];
  [ms appendFormat: @"%i", __persistent];
  [ms appendString: @",hidden:"];
  [ms appendFormat: @"%i", __hidden];
  [ms appendString: @",receivingRoomListUpdates:"];
  [ms appendFormat: @"%i", __receivingRoomListUpdates];
  [ms appendString: @",receivingRoomAttributeUpdates:"];
  [ms appendFormat: @"%i", __receivingRoomAttributeUpdates];
  [ms appendString: @",receivingUserListUpdates:"];
  [ms appendFormat: @"%i", __receivingUserListUpdates];
  [ms appendString: @",receivingUserVariableUpdates:"];
  [ms appendFormat: @"%i", __receivingUserVariableUpdates];
  [ms appendString: @",receivingRoomVariableUpdates:"];
  [ms appendFormat: @"%i", __receivingRoomVariableUpdates];
  [ms appendString: @",receivingVideoEvents:"];
  [ms appendFormat: @"%i", __receivingVideoEvents];
  [ms appendString: @",nonOperatorUpdateAllowed:"];
  [ms appendFormat: @"%i", __nonOperatorUpdateAllowed];
  [ms appendString: @",nonOperatorVariableUpdateAllowed:"];
  [ms appendFormat: @"%i", __nonOperatorVariableUpdateAllowed];
  [ms appendString: @",createOrJoinRoom:"];
  [ms appendFormat: @"%i", __createOrJoinRoom];
  [ms appendString: @",plugins:"];
  [ms appendFormat: @"%@", __plugins];
  [ms appendString: @",variables:"];
  [ms appendFormat: @"%@", __variables];
  [ms appendString: @",usingLanguageFilter:"];
  [ms appendFormat: @"%i", __usingLanguageFilter];
  [ms appendString: @",languageFilterSpecified:"];
  [ms appendFormat: @"%i", __languageFilterSpecified];
  [ms appendString: @",languageFilterName:"];
  [ms appendFormat: @"\"%@\"", __languageFilterName];
  [ms appendString: @",languageFilterDeliverMessageOnFailure:"];
  [ms appendFormat: @"%i", __languageFilterDeliverMessageOnFailure];
  [ms appendString: @",languageFilterFailuresBeforeKick:"];
  [ms appendFormat: @"%i", __languageFilterFailuresBeforeKick];
  [ms appendString: @",languageFilterKicksBeforeBan:"];
  [ms appendFormat: @"%i", __languageFilterKicksBeforeBan];
  [ms appendString: @",languageFilterBanDuration:"];
  [ms appendFormat: @"%i", __languageFilterBanDuration];
  [ms appendString: @",languageFilterResetAfterKick:"];
  [ms appendFormat: @"%i", __languageFilterResetAfterKick];
  [ms appendString: @",usingFloodingFilter:"];
  [ms appendFormat: @"%i", __usingFloodingFilter];
  [ms appendString: @",floodingFilterSpecified:"];
  [ms appendFormat: @"%i", __floodingFilterSpecified];
  [ms appendString: @",floodingFilterName:"];
  [ms appendFormat: @"\"%@\"", __floodingFilterName];
  [ms appendString: @",floodingFilterFailuresBeforeKick:"];
  [ms appendFormat: @"%i", __floodingFilterFailuresBeforeKick];
  [ms appendString: @",floodingFilterKicksBeforeBan:"];
  [ms appendFormat: @"%i", __floodingFilterKicksBeforeBan];
  [ms appendString: @",floodingFilterBanDuration:"];
  [ms appendFormat: @"%i", __floodingFilterBanDuration];
  [ms appendString: @",floodingFilterResetAfterKick:"];
  [ms appendFormat: @"%i", __floodingFilterResetAfterKick];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


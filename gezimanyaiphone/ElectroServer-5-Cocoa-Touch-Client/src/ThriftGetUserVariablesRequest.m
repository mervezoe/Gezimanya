/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "ThriftGetUserVariablesRequest.h"


@implementation ThriftGetUserVariablesRequestConstants
+ (void) initialize {
}
@end

@implementation ThriftGetUserVariablesRequest

- (id) initWithUserName: (NSString *) userName userVariableNames: (NSSet *) userVariableNames
{
  self = [super init];
  __userName = [userName retain];
  __userName_isset = YES;
  __userVariableNames = [userVariableNames retain];
  __userVariableNames_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"userVariableNames"])
  {
    __userVariableNames = [[decoder decodeObjectForKey: @"userVariableNames"] retain];
    __userVariableNames_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__userVariableNames_isset)
  {
    [encoder encodeObject: __userVariableNames forKey: @"userVariableNames"];
  }
}

- (void) dealloc
{
  [__userName release];
  [__userVariableNames release];
  [super dealloc];
}

- (NSString *) userName {
  return [[__userName retain] autorelease];
}

- (void) setUserName: (NSString *) userName {
  [userName retain];
  [__userName release];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release];
  __userName = nil;
  __userName_isset = NO;
}

- (NSSet *) userVariableNames {
  return [[__userVariableNames retain] autorelease];
}

- (void) setUserVariableNames: (NSSet *) userVariableNames {
  [userVariableNames retain];
  [__userVariableNames release];
  __userVariableNames = userVariableNames;
  __userVariableNames_isset = YES;
}

- (BOOL) userVariableNamesIsSet {
  return __userVariableNames_isset;
}

- (void) unsetUserVariableNames {
  [__userVariableNames release];
  __userVariableNames = nil;
  __userVariableNames_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_SET) {
          int _size0;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size0];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readSetEnd];
          [self setUserVariableNames: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftGetUserVariablesRequest"];
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userVariableNames_isset) {
    if (__userVariableNames != nil) {
      [outProtocol writeFieldBeginWithName: @"userVariableNames" type: TType_SET fieldID: 2];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__userVariableNames count]];
        NSEnumerator * _iter3 = [__userVariableNames objectEnumerator];
        id obj4;
        while ((obj4 = [_iter3 nextObject]))
        {
          [outProtocol writeString: obj4];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftGetUserVariablesRequest("];
  [ms appendString: @"userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",userVariableNames:"];
  [ms appendFormat: @"%@", __userVariableNames];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


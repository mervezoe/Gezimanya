//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftConnectionClosedEvent.h>

/**
 * When a connection closes this event occurs. In most cases a client only has a single connection open, so if this even occurs then usually it means the client is no longer connected 
 to the server. However, a client can have multiple simultaneous connections open. If one connection is lost it does not necessarily mean that there is no connection to the server. 
 You can check the 'connected' property on the ESEngine class to see if any connection is open, and loop through the list of active connections using the 'activeConnections' property on 
 the ESEngine class if needed.
 * 
 * This shows how to detect if a connection is lost. It also prints out the status of the 'connected' property on the ESEngine instance.
 <pre>
private var _es:ElectroServer;
private var _room:Room;

private function initialize():void {
        _es.engine.addEventListener(MessageType.ConnectionClosedEvent.name, onConnectionClosedEvent);
}

private function onConnectionClosedEvent(e:ConnectionClosedEvent):void {
        trace("A connection closed!");
        trace("Still have at least one connection open: " + _es.engine.connected.toString());
}
</pre>
 */
@interface EsConnectionClosedEvent : EsEvent {
@private
	BOOL connectionId_set_;
	int32_t connectionId_;
}

/**
 * The local id of the connection that was lost.
 */
@property(nonatomic) int32_t connectionId;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftConnectionClosedEvent*) toThrift;
- (id) newThrift;
@end

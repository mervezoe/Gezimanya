//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftUserUpdateEvent.h>
#import <EsFlattenedEsObject.h>
#import <ThriftFlattenedEsObject.h>
#import <EsUserVariable.h>
#import <ThriftUserVariable.h>
#import <EsUserUpdateAction.h>
#import <ThriftUserUpdateAction.h>

/**
 * The user list can change when a client is in a room, and properties on a user can also change. 
 There are a handful actions that can occur that lead to this event. The can be found in the 
 UserUpdateAction class. The actions are:
 <br>AddUser - This action occurs when a user joins the room.<br>
 <br>DeleteUser - Occurs when a user leaves the room.<br>
 <br>UpdateUser - TODO: see if this is still used<br>
 <br>OperatorGranted - Occurs when operator status is granted to a user.<br>
 <br>OperatorRevoked - Occurs when operator status is revoked from a user.<br>
 <br>SendingVideoStream - Flash only. This occurs when a user is streaming video from a webcam to the room.<br>
 <br>StoppingVideoStream - Flash only. This occurs when a user stops streaming video from a webcam to the room.<br>
 * 
 * This example shows how to capture the UserUpdateEvent, and if it is related to the user list changing, then update the user list.
 <pre>
private var _es:ElectroServer;
private var _room:Room;

private function initialize():void {
        _es.engine.addEventListener(MessageType.UserUpdateEvent.name, onUserUpdateEvent);
}

private function onUserUpdateEvent(e:UserUpdateEvent):void {
        switch (e.action) {
                case UserUpdateAction.AddUser:
                case UserUpdateAction.DeleteUser:
                        updateUserList();
                        break;
                default:
                        trace("Action not handled: " + e.action.name);
        }
}

private function updateUserList():void{
        //update the user list display with the latest list of users
        var user:Array = _room.users;
}
 </pre>
 */
@interface EsUserUpdateEvent : EsEvent {
@private
	BOOL zoneId_set_;
	int32_t zoneId_;
	BOOL roomId_set_;
	int32_t roomId_;
	BOOL action_set_;
	int action_;
	BOOL userName_set_;
	NSString* userName_;
	BOOL userVariables_set_;
	NSMutableArray* userVariables_;
	BOOL sendingVideo_set_;
	BOOL sendingVideo_;
	BOOL videoStreamName_set_;
	NSString* videoStreamName_;
}

/**
 * The id of the zone that contains the room.
 */
@property(nonatomic) int32_t zoneId;
/**
 * Id of the room that this event describes.
 */
@property(nonatomic) int32_t roomId;
/**
 * Action that describes what just occurred, such as AddUser or DeleteUser.
 */
@property(nonatomic) int action;
/**
 * Name of the user affected, if applicable.
 */
@property(retain,nonatomic) NSString* userName;
/**
 * List of user variables associated with the user, if a user was just added.
 */
@property(retain,nonatomic) NSMutableArray* userVariables;
/**
 * If the user's video streaming status just changed, then it reflected here. Flash only.
 */
@property(nonatomic) BOOL sendingVideo;
/**
 * If the user is streaming video to the server then the name of the stream is specified here. Flash only.
 */
@property(retain,nonatomic) NSString* videoStreamName;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftUserUpdateEvent*) toThrift;
- (id) newThrift;
@end

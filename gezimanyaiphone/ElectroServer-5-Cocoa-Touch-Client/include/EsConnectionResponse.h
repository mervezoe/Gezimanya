//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftConnectionResponse.h>
#import <EsProtocolConfiguration.h>
#import <ThriftProtocolConfiguration.h>
#import <EsErrorType.h>
#import <ThriftErrorType.h>

/**
 * Before a client can do anything with the server a connection must be established. A connection can be attempted automatically using the loadAndConnect method (see example below) or manually. 
 When connecting automatically or manually you have the ability to specify a series of connections to attempt. They are attempted in order until one succeeds or they all fail. As each 
 connection individually succeeds or fails a ConnectionAttemptResponse event is fired off. Once a connection succeeds or they all fail, a ConnectionResponse event is fired off.
 * 
 * This is example shows how to have the client automatically load a file containing connection information, and then connect to the server. The contents of the settings.xml file would look like this:
 <pre>
<settings>
        <connection ip="127.0.0.1" port="9899" transport="socket" serverId="server1" />
</settings>
</pre>
The code:
<pre>
package {
        import flash.display.Sprite;

        //ElectroServer imports
        import com.electrotank.electroserver5.api.ConnectionResponse;
        import com.electrotank.electroserver5.api.MessageType;
        import com.electrotank.electroserver5.ElectroServer;

        //Logger imports
        import mx.logging.Log;
        import mx.logging.targets.TraceTarget;

        public class Main extends Sprite {

                private var _es:ElectroServer = new ElectroServer();

                public function Main():void {

                        //add this so we can see the logs get traced
                        Log.addTarget(new TraceTarget());

                        //load settings file and connect
                        _es.loadAndConnect("settings.xml");

                        //listen to key events to know when a connection has succeeded (or failed), and when login has succeeded (or failed)
                        _es.engine.addEventListener(MessageType.ConnectionResponse.name, onConnectionResponse);
                }

                private function onConnectionResponse(e:ConnectionResponse):void {
                        trace("Connection success: " + e.successful.toString());
                        if (!e.successful) {
                                trace(e.error.name);
                        }
                }
        }
}
</pre>

This example shows how to manually connect:

<pre>
package {
        import flash.display.Sprite;

        //ElectroServer imports
        import com.electrotank.electroserver5.connection.AvailableConnection;
        import com.electrotank.electroserver5.connection.TransportType;
        import com.electrotank.electroserver5.server.Server;
        import com.electrotank.electroserver5.api.ConnectionResponse;
        import com.electrotank.electroserver5.api.MessageType;
        import com.electrotank.electroserver5.ElectroServer;

        //Logger imports
        import mx.logging.Log;
        import mx.logging.targets.TraceTarget;

        public class Main extends Sprite {

                private var _es:ElectroServer = new ElectroServer();

                public function Main():void {

                        //add this so we can see the logs get traced
                        Log.addTarget(new TraceTarget());

                        //create a Server definition to hold a list of available connections
                        var server:Server = new Server("server1");

                        //create an AvailableConnection instance to contain connection info, and add it to the server
                        var availConn:AvailableConnection = new AvailableConnection("127.0.0.1", 9899, TransportType.SOCKET);
                        server.addAvailableConnection(availConn);

                        //add the server definition to the API
                        _es.engine.addServer(server);

                        //tell the API to cycle through all possible connections on all possible servers until one is accepted
                        _es.engine.connect();

                        //listen to key events to know when a connection has succeeded (or failed), and when login has succeeded (or failed)
                        _es.engine.addEventListener(MessageType.ConnectionResponse.name, onConnectionResponse);
                        _es.engine.addEventListener(MessageType.LoginResponse.name, onLoginResponse);
                }

                private function onConnectionResponse(e:ConnectionResponse):void {
                        trace("Connection success: " + e.successful.toString());
                        if (!e.successful) {
                                trace(e.error.name);
                        }
                }
        }

}
</pre>
 */
@interface EsConnectionResponse : EsResponse {
@private
	BOOL successful_set_;
	BOOL successful_;
	BOOL hashId_set_;
	int32_t hashId_;
	BOOL error_set_;
	int error_;
	BOOL protocolConfiguration_set_;
	EsProtocolConfiguration* protocolConfiguration_;
	BOOL serverVersion_set_;
	NSString* serverVersion_;
}

/**
 * If true then a connection was established between the client and server. If false, then no connection was established (inspect the error property for a reason).
 */
@property(nonatomic) BOOL successful;
@property(nonatomic) int32_t hashId;
@property(nonatomic) int error;
@property(retain,nonatomic) EsProtocolConfiguration* protocolConfiguration;
@property(retain,nonatomic) NSString* serverVersion;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftConnectionResponse*) toThrift;
- (id) newThrift;
@end

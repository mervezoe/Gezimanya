/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "ThriftProtocol.h"

#import "ThriftRegistryConnectToPreferredGatewayRequest.h"


@implementation ThriftRegistryConnectToPreferredGatewayRequestConstants
+ (void) initialize {
}
@end

@implementation ThriftRegistryConnectToPreferredGatewayRequest

- (id) initWithZoneId: (int32_t) zoneId host: (NSString *) host port: (int32_t) port protocolToUse: (int) protocolToUse
{
  self = [super init];
  __zoneId = zoneId;
  __zoneId_isset = YES;
  __host = [host retain];
  __host_isset = YES;
  __port = port;
  __port_isset = YES;
  __protocolToUse = protocolToUse;
  __protocolToUse_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"zoneId"])
  {
    __zoneId = [decoder decodeInt32ForKey: @"zoneId"];
    __zoneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"host"])
  {
    __host = [[decoder decodeObjectForKey: @"host"] retain];
    __host_isset = YES;
  }
  if ([decoder containsValueForKey: @"port"])
  {
    __port = [decoder decodeInt32ForKey: @"port"];
    __port_isset = YES;
  }
  if ([decoder containsValueForKey: @"protocolToUse"])
  {
    __protocolToUse = [decoder decodeIntForKey: @"protocolToUse"];
    __protocolToUse_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__zoneId_isset)
  {
    [encoder encodeInt32: __zoneId forKey: @"zoneId"];
  }
  if (__host_isset)
  {
    [encoder encodeObject: __host forKey: @"host"];
  }
  if (__port_isset)
  {
    [encoder encodeInt32: __port forKey: @"port"];
  }
  if (__protocolToUse_isset)
  {
    [encoder encodeInt: __protocolToUse forKey: @"protocolToUse"];
  }
}

- (void) dealloc
{
  [__host release];
  [super dealloc];
}

- (int32_t) zoneId {
  return __zoneId;
}

- (void) setZoneId: (int32_t) zoneId {
  __zoneId = zoneId;
  __zoneId_isset = YES;
}

- (BOOL) zoneIdIsSet {
  return __zoneId_isset;
}

- (void) unsetZoneId {
  __zoneId_isset = NO;
}

- (NSString *) host {
  return [[__host retain] autorelease];
}

- (void) setHost: (NSString *) host {
  [host retain];
  [__host release];
  __host = host;
  __host_isset = YES;
}

- (BOOL) hostIsSet {
  return __host_isset;
}

- (void) unsetHost {
  [__host release];
  __host = nil;
  __host_isset = NO;
}

- (int32_t) port {
  return __port;
}

- (void) setPort: (int32_t) port {
  __port = port;
  __port_isset = YES;
}

- (BOOL) portIsSet {
  return __port_isset;
}

- (void) unsetPort {
  __port_isset = NO;
}

- (int) protocolToUse {
  return __protocolToUse;
}

- (void) setProtocolToUse: (int) protocolToUse {
  __protocolToUse = protocolToUse;
  __protocolToUse_isset = YES;
}

- (BOOL) protocolToUseIsSet {
  return __protocolToUse_isset;
}

- (void) unsetProtocolToUse {
  __protocolToUse_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZoneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setProtocolToUse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftRegistryConnectToPreferredGatewayRequest"];
  if (__zoneId_isset) {
    [outProtocol writeFieldBeginWithName: @"zoneId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __zoneId];
    [outProtocol writeFieldEnd];
  }
  if (__host_isset) {
    if (__host != nil) {
      [outProtocol writeFieldBeginWithName: @"host" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host];
      [outProtocol writeFieldEnd];
    }
  }
  if (__port_isset) {
    [outProtocol writeFieldBeginWithName: @"port" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __port];
    [outProtocol writeFieldEnd];
  }
  if (__protocolToUse_isset) {
    [outProtocol writeFieldBeginWithName: @"protocolToUse" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __protocolToUse];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftRegistryConnectToPreferredGatewayRequest("];
  [ms appendString: @"zoneId:"];
  [ms appendFormat: @"%i", __zoneId];
  [ms appendString: @",host:"];
  [ms appendFormat: @"\"%@\"", __host];
  [ms appendString: @",port:"];
  [ms appendFormat: @"%i", __port];
  [ms appendString: @",protocolToUse:"];
  [ms appendFormat: @"%i", __protocolToUse];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


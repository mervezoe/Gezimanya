/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "ThriftLogOutRequest.h"


@implementation ThriftLogOutRequestConstants
+ (void) initialize {
}
@end

@implementation ThriftLogOutRequest

- (id) initWithDropConnection: (BOOL) dropConnection dropAllConnections: (BOOL) dropAllConnections
{
  self = [super init];
  __dropConnection = dropConnection;
  __dropConnection_isset = YES;
  __dropAllConnections = dropAllConnections;
  __dropAllConnections_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dropConnection"])
  {
    __dropConnection = [decoder decodeBoolForKey: @"dropConnection"];
    __dropConnection_isset = YES;
  }
  if ([decoder containsValueForKey: @"dropAllConnections"])
  {
    __dropAllConnections = [decoder decodeBoolForKey: @"dropAllConnections"];
    __dropAllConnections_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dropConnection_isset)
  {
    [encoder encodeBool: __dropConnection forKey: @"dropConnection"];
  }
  if (__dropAllConnections_isset)
  {
    [encoder encodeBool: __dropAllConnections forKey: @"dropAllConnections"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) dropConnection {
  return __dropConnection;
}

- (void) setDropConnection: (BOOL) dropConnection {
  __dropConnection = dropConnection;
  __dropConnection_isset = YES;
}

- (BOOL) dropConnectionIsSet {
  return __dropConnection_isset;
}

- (void) unsetDropConnection {
  __dropConnection_isset = NO;
}

- (BOOL) dropAllConnections {
  return __dropAllConnections;
}

- (void) setDropAllConnections: (BOOL) dropAllConnections {
  __dropAllConnections = dropAllConnections;
  __dropAllConnections_isset = YES;
}

- (BOOL) dropAllConnectionsIsSet {
  return __dropAllConnections_isset;
}

- (void) unsetDropAllConnections {
  __dropAllConnections_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDropConnection: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDropAllConnections: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftLogOutRequest"];
  if (__dropConnection_isset) {
    [outProtocol writeFieldBeginWithName: @"dropConnection" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __dropConnection];
    [outProtocol writeFieldEnd];
  }
  if (__dropAllConnections_isset) {
    [outProtocol writeFieldBeginWithName: @"dropAllConnections" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __dropAllConnections];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftLogOutRequest("];
  [ms appendString: @"dropConnection:"];
  [ms appendFormat: @"%i", __dropConnection];
  [ms appendString: @",dropAllConnections:"];
  [ms appendFormat: @"%i", __dropAllConnections];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftLoginResponse.h>
#import <EsFlattenedEsObjectRO.h>
#import <ThriftFlattenedEsObjectRO.h>
#import <EsErrorType.h>
#import <ThriftErrorType.h>

/**
 * After a client attempts a login via the LoginRequest message the server responds with this message. In most situations what you'll care about looking for is the successful property. If true, the login succeeded.
 * 
 * Full example. This code connects to the server, logs in, and captures the login response.
 <pre>
package {
        import flash.display.Sprite;

        //ElectroServer imports
        import com.electrotank.electroserver5.api.ConnectionResponse;
        import com.electrotank.electroserver5.api.LoginRequest;
        import com.electrotank.electroserver5.api.LoginResponse;
        import com.electrotank.electroserver5.api.MessageType;
        import com.electrotank.electroserver5.ElectroServer;

        //Logger imports
        import mx.logging.Log;
        import mx.logging.targets.TraceTarget;

        public class Main extends Sprite {

                private var _es:ElectroServer = new ElectroServer();

                public function Main():void {

                        //add this so we can see the logs get traced
                        Log.addTarget(new TraceTarget());

                        load settings file and connect
                        _es.loadAndConnect("settings.xml");

                        //listen to key events to know when a connection has succeeded (or failed), and when login has succeeded (or failed)
                        _es.engine.addEventListener(MessageType.ConnectionResponse.name, onConnectionResponse);
                        _es.engine.addEventListener(MessageType.LoginResponse.name, onLoginResponse);
                }

                private function onConnectionResponse(e:ConnectionResponse):void {
                        trace("Connection success: " + e.successful.toString());
                        if (e.successful) {
                                //connection succeeded, so login. Use randomly generated name.
                                var lr:LoginRequest = new LoginRequest();
                                lr.userName = "guest" + Math.round(1000 * Math.random()).toString();

                                _es.engine.send(lr);
                        }
                }

                private function onLoginResponse(e:LoginResponse):void {
                        trace("Login accepted: " + e.successful.toString());
                        if (!e.successful) {
                                trace(e.error.name);
                        }
                }

        }

}
 </pre>
 */
@interface EsLoginResponse : EsResponse {
@private
	BOOL successful_set_;
	BOOL successful_;
	BOOL error_set_;
	int error_;
	BOOL esObject_set_;
	EsObject* esObject_;
	BOOL userName_set_;
	NSString* userName_;
	BOOL userVariables_set_;
	NSMutableDictionary* userVariables_;
	BOOL buddyListEntries_set_;
	NSMutableDictionary* buddyListEntries_;
}

/**
 * If true then the login was successful. If false, then it was not sucessful. A login can fail if 1) the user name is already in use, 2) the user name fails the language filter check, 3) 
 or if there is a LoginEventHandler registered and it decided that the login is invalid.
 */
@property(nonatomic) BOOL successful;
/**
 * If successful == false then this property is non-null. It contains a reason why the login failed.
 */
@property(nonatomic) int error;
/**
 * If there is a LoginEventHandler registered with the server then it can send an EsObject back on this message. It can contain any amount of data.
 */
@property(retain,nonatomic) EsObject* esObject;
/**
 * The user name that the server assigned to you. In most cases this will be the user name that the user requested on the LoginRequest object. If there is a LoginEventHandler regsitered, 
 then it change the user name.
 */
@property(retain,nonatomic) NSString* userName;
/**
 * This property contains any user variables that the client added in the login request or that the server added/edited in a LoginEventHandler. If you are using the managed layer API then 
 these are already kept track of and you can access them whenever you want, like this: _es.managerHelper.userManager.me.userVariables
 */
@property(retain,nonatomic) NSMutableDictionary* userVariables;
/**
 * If there is a LoginEventHandler registered and it added some buddies for you, then they are listed here.
 */
@property(retain,nonatomic) NSMutableDictionary* buddyListEntries;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftLoginResponse*) toThrift;
- (id) newThrift;
@end

//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsCreateRoomRequest.h>
#import <EsThriftUtil.h>

@implementation EsCreateRoomRequest

@synthesize zoneName = zoneName_;
@synthesize zoneId = zoneId_;
@synthesize roomName = roomName_;
@synthesize capacity = capacity_;
@synthesize password = password_;
@synthesize roomDescription = roomDescription_;
@synthesize persistent = persistent_;
@synthesize hidden = hidden_;
@synthesize receivingRoomListUpdates = receivingRoomListUpdates_;
@synthesize receivingRoomAttributeUpdates = receivingRoomAttributeUpdates_;
@synthesize receivingUserListUpdates = receivingUserListUpdates_;
@synthesize receivingUserVariableUpdates = receivingUserVariableUpdates_;
@synthesize receivingRoomVariableUpdates = receivingRoomVariableUpdates_;
@synthesize receivingVideoEvents = receivingVideoEvents_;
@synthesize nonOperatorUpdateAllowed = nonOperatorUpdateAllowed_;
@synthesize nonOperatorVariableUpdateAllowed = nonOperatorVariableUpdateAllowed_;
@synthesize createOrJoinRoom = createOrJoinRoom_;
@synthesize plugins = plugins_;
@synthesize variables = variables_;
@synthesize usingLanguageFilter = usingLanguageFilter_;
@synthesize languageFilterSpecified = languageFilterSpecified_;
@synthesize languageFilterName = languageFilterName_;
@synthesize languageFilterDeliverMessageOnFailure = languageFilterDeliverMessageOnFailure_;
@synthesize languageFilterFailuresBeforeKick = languageFilterFailuresBeforeKick_;
@synthesize languageFilterKicksBeforeBan = languageFilterKicksBeforeBan_;
@synthesize languageFilterBanDuration = languageFilterBanDuration_;
@synthesize languageFilterResetAfterKick = languageFilterResetAfterKick_;
@synthesize usingFloodingFilter = usingFloodingFilter_;
@synthesize floodingFilterSpecified = floodingFilterSpecified_;
@synthesize floodingFilterName = floodingFilterName_;
@synthesize floodingFilterFailuresBeforeKick = floodingFilterFailuresBeforeKick_;
@synthesize floodingFilterKicksBeforeBan = floodingFilterKicksBeforeBan_;
@synthesize floodingFilterBanDuration = floodingFilterBanDuration_;
@synthesize floodingFilterResetAfterKick = floodingFilterResetAfterKick_;

- (id) initWithThriftObject: (id) thriftObject {
	if ((self = [super init])) {
		self.messageType = EsMessageType_CreateRoomRequest;
		self.zoneId = -1;
		self.capacity = -1;
		self.persistent = false;
		self.hidden = false;
		self.receivingRoomListUpdates = true;
		self.receivingRoomAttributeUpdates = true;
		self.receivingUserListUpdates = true;
		self.receivingUserVariableUpdates = true;
		self.receivingRoomVariableUpdates = true;
		self.receivingVideoEvents = true;
		self.nonOperatorUpdateAllowed = true;
		self.nonOperatorVariableUpdateAllowed = true;
		self.createOrJoinRoom = true;
		self.plugins = [NSMutableArray array];
		self.variables = [NSMutableArray array];
		self.usingLanguageFilter = false;
		self.languageFilterSpecified = false;
		self.languageFilterDeliverMessageOnFailure = false;
		self.languageFilterFailuresBeforeKick = 3;
		self.languageFilterKicksBeforeBan = 3;
		self.languageFilterBanDuration = -1;
		self.languageFilterResetAfterKick = false;
		self.usingFloodingFilter = false;
		self.floodingFilterSpecified = false;
		self.floodingFilterFailuresBeforeKick = 1;
		self.floodingFilterKicksBeforeBan = 3;
		self.floodingFilterBanDuration = -1;
		self.floodingFilterResetAfterKick = false;
		if (thriftObject != nil) {
			[self fromThrift: thriftObject];
		}
	}
	return self;
}

- (id) init {
	return [self initWithThriftObject: nil];
}

- (void) fromThrift: (id) thriftObject {
	ThriftCreateRoomRequest* t = (ThriftCreateRoomRequest*) thriftObject;
	if ([t zoneNameIsSet] && t.zoneName != nil) {
		self.zoneName = t.zoneName;
	}
	if ([t zoneIdIsSet]) {
		self.zoneId = t.zoneId;
	}
	if ([t roomNameIsSet] && t.roomName != nil) {
		self.roomName = t.roomName;
	}
	if ([t capacityIsSet]) {
		self.capacity = t.capacity;
	}
	if ([t passwordIsSet] && t.password != nil) {
		self.password = t.password;
	}
	if ([t roomDescriptionIsSet] && t.roomDescription != nil) {
		self.roomDescription = t.roomDescription;
	}
	if ([t persistentIsSet]) {
		self.persistent = t.persistent;
	}
	if ([t hiddenIsSet]) {
		self.hidden = t.hidden;
	}
	if ([t receivingRoomListUpdatesIsSet]) {
		self.receivingRoomListUpdates = t.receivingRoomListUpdates;
	}
	if ([t receivingRoomAttributeUpdatesIsSet]) {
		self.receivingRoomAttributeUpdates = t.receivingRoomAttributeUpdates;
	}
	if ([t receivingUserListUpdatesIsSet]) {
		self.receivingUserListUpdates = t.receivingUserListUpdates;
	}
	if ([t receivingUserVariableUpdatesIsSet]) {
		self.receivingUserVariableUpdates = t.receivingUserVariableUpdates;
	}
	if ([t receivingRoomVariableUpdatesIsSet]) {
		self.receivingRoomVariableUpdates = t.receivingRoomVariableUpdates;
	}
	if ([t receivingVideoEventsIsSet]) {
		self.receivingVideoEvents = t.receivingVideoEvents;
	}
	if ([t nonOperatorUpdateAllowedIsSet]) {
		self.nonOperatorUpdateAllowed = t.nonOperatorUpdateAllowed;
	}
	if ([t nonOperatorVariableUpdateAllowedIsSet]) {
		self.nonOperatorVariableUpdateAllowed = t.nonOperatorVariableUpdateAllowed;
	}
	if ([t createOrJoinRoomIsSet]) {
		self.createOrJoinRoom = t.createOrJoinRoom;
	}
	if ([t pluginsIsSet] && t.plugins != nil) {
		self.plugins = [[[NSMutableArray alloc] init] autorelease];
		for (ThriftPluginListEntry* _tValVar_0 in t.plugins) {
			EsPluginListEntry* _listDestVar_0;
			_listDestVar_0 = [[[EsPluginListEntry alloc] initWithThriftObject:_tValVar_0] autorelease];
			[self.plugins addObject: _listDestVar_0];
		}
	}
	if ([t variablesIsSet] && t.variables != nil) {
		self.variables = [[[NSMutableArray alloc] init] autorelease];
		for (ThriftRoomVariable* _tValVar_0 in t.variables) {
			EsRoomVariable* _listDestVar_0;
			_listDestVar_0 = [[[EsRoomVariable alloc] initWithThriftObject:_tValVar_0] autorelease];
			[self.variables addObject: _listDestVar_0];
		}
	}
	if ([t usingLanguageFilterIsSet]) {
		self.usingLanguageFilter = t.usingLanguageFilter;
	}
	if ([t languageFilterSpecifiedIsSet]) {
		self.languageFilterSpecified = t.languageFilterSpecified;
	}
	if ([t languageFilterNameIsSet] && t.languageFilterName != nil) {
		self.languageFilterName = t.languageFilterName;
	}
	if ([t languageFilterDeliverMessageOnFailureIsSet]) {
		self.languageFilterDeliverMessageOnFailure = t.languageFilterDeliverMessageOnFailure;
	}
	if ([t languageFilterFailuresBeforeKickIsSet]) {
		self.languageFilterFailuresBeforeKick = t.languageFilterFailuresBeforeKick;
	}
	if ([t languageFilterKicksBeforeBanIsSet]) {
		self.languageFilterKicksBeforeBan = t.languageFilterKicksBeforeBan;
	}
	if ([t languageFilterBanDurationIsSet]) {
		self.languageFilterBanDuration = t.languageFilterBanDuration;
	}
	if ([t languageFilterResetAfterKickIsSet]) {
		self.languageFilterResetAfterKick = t.languageFilterResetAfterKick;
	}
	if ([t usingFloodingFilterIsSet]) {
		self.usingFloodingFilter = t.usingFloodingFilter;
	}
	if ([t floodingFilterSpecifiedIsSet]) {
		self.floodingFilterSpecified = t.floodingFilterSpecified;
	}
	if ([t floodingFilterNameIsSet] && t.floodingFilterName != nil) {
		self.floodingFilterName = t.floodingFilterName;
	}
	if ([t floodingFilterFailuresBeforeKickIsSet]) {
		self.floodingFilterFailuresBeforeKick = t.floodingFilterFailuresBeforeKick;
	}
	if ([t floodingFilterKicksBeforeBanIsSet]) {
		self.floodingFilterKicksBeforeBan = t.floodingFilterKicksBeforeBan;
	}
	if ([t floodingFilterBanDurationIsSet]) {
		self.floodingFilterBanDuration = t.floodingFilterBanDuration;
	}
	if ([t floodingFilterResetAfterKickIsSet]) {
		self.floodingFilterResetAfterKick = t.floodingFilterResetAfterKick;
	}
}

- (ThriftCreateRoomRequest*) toThrift {
	ThriftCreateRoomRequest* _t = [[[ThriftCreateRoomRequest alloc] init] autorelease];;
	if (zoneName_set_ && zoneName_ != nil) {
		NSString* _zoneName;
		_zoneName = self.zoneName;
		_t.zoneName = _zoneName;
	}
	if (zoneId_set_) {
		int32_t _zoneId;
		_zoneId = self.zoneId;
		_t.zoneId = _zoneId;
	}
	if (roomName_set_ && roomName_ != nil) {
		NSString* _roomName;
		_roomName = self.roomName;
		_t.roomName = _roomName;
	}
	if (capacity_set_) {
		int32_t _capacity;
		_capacity = self.capacity;
		_t.capacity = _capacity;
	}
	if (password_set_ && password_ != nil) {
		NSString* _password;
		_password = self.password;
		_t.password = _password;
	}
	if (roomDescription_set_ && roomDescription_ != nil) {
		NSString* _roomDescription;
		_roomDescription = self.roomDescription;
		_t.roomDescription = _roomDescription;
	}
	if (persistent_set_) {
		BOOL _persistent;
		_persistent = self.persistent;
		_t.persistent = _persistent;
	}
	if (hidden_set_) {
		BOOL _hidden;
		_hidden = self.hidden;
		_t.hidden = _hidden;
	}
	if (receivingRoomListUpdates_set_) {
		BOOL _receivingRoomListUpdates;
		_receivingRoomListUpdates = self.receivingRoomListUpdates;
		_t.receivingRoomListUpdates = _receivingRoomListUpdates;
	}
	if (receivingRoomAttributeUpdates_set_) {
		BOOL _receivingRoomAttributeUpdates;
		_receivingRoomAttributeUpdates = self.receivingRoomAttributeUpdates;
		_t.receivingRoomAttributeUpdates = _receivingRoomAttributeUpdates;
	}
	if (receivingUserListUpdates_set_) {
		BOOL _receivingUserListUpdates;
		_receivingUserListUpdates = self.receivingUserListUpdates;
		_t.receivingUserListUpdates = _receivingUserListUpdates;
	}
	if (receivingUserVariableUpdates_set_) {
		BOOL _receivingUserVariableUpdates;
		_receivingUserVariableUpdates = self.receivingUserVariableUpdates;
		_t.receivingUserVariableUpdates = _receivingUserVariableUpdates;
	}
	if (receivingRoomVariableUpdates_set_) {
		BOOL _receivingRoomVariableUpdates;
		_receivingRoomVariableUpdates = self.receivingRoomVariableUpdates;
		_t.receivingRoomVariableUpdates = _receivingRoomVariableUpdates;
	}
	if (receivingVideoEvents_set_) {
		BOOL _receivingVideoEvents;
		_receivingVideoEvents = self.receivingVideoEvents;
		_t.receivingVideoEvents = _receivingVideoEvents;
	}
	if (nonOperatorUpdateAllowed_set_) {
		BOOL _nonOperatorUpdateAllowed;
		_nonOperatorUpdateAllowed = self.nonOperatorUpdateAllowed;
		_t.nonOperatorUpdateAllowed = _nonOperatorUpdateAllowed;
	}
	if (nonOperatorVariableUpdateAllowed_set_) {
		BOOL _nonOperatorVariableUpdateAllowed;
		_nonOperatorVariableUpdateAllowed = self.nonOperatorVariableUpdateAllowed;
		_t.nonOperatorVariableUpdateAllowed = _nonOperatorVariableUpdateAllowed;
	}
	if (createOrJoinRoom_set_) {
		BOOL _createOrJoinRoom;
		_createOrJoinRoom = self.createOrJoinRoom;
		_t.createOrJoinRoom = _createOrJoinRoom;
	}
	if (plugins_set_ && plugins_ != nil) {
		NSMutableArray* _plugins;
		_plugins = [[[NSMutableArray alloc] init] autorelease];
		for (EsPluginListEntry* _tValVar_0 in self.plugins) {
			ThriftPluginListEntry* _listDestVar_0;
			_listDestVar_0 = [_tValVar_0 toThrift];
			[_plugins addObject: _listDestVar_0];
		}
		_t.plugins = _plugins;
	}
	if (variables_set_ && variables_ != nil) {
		NSMutableArray* _variables;
		_variables = [[[NSMutableArray alloc] init] autorelease];
		for (EsRoomVariable* _tValVar_0 in self.variables) {
			ThriftRoomVariable* _listDestVar_0;
			_listDestVar_0 = [_tValVar_0 toThrift];
			[_variables addObject: _listDestVar_0];
		}
		_t.variables = _variables;
	}
	if (usingLanguageFilter_set_) {
		BOOL _usingLanguageFilter;
		_usingLanguageFilter = self.usingLanguageFilter;
		_t.usingLanguageFilter = _usingLanguageFilter;
	}
	if (languageFilterSpecified_set_) {
		BOOL _languageFilterSpecified;
		_languageFilterSpecified = self.languageFilterSpecified;
		_t.languageFilterSpecified = _languageFilterSpecified;
	}
	if (languageFilterName_set_ && languageFilterName_ != nil) {
		NSString* _languageFilterName;
		_languageFilterName = self.languageFilterName;
		_t.languageFilterName = _languageFilterName;
	}
	if (languageFilterDeliverMessageOnFailure_set_) {
		BOOL _languageFilterDeliverMessageOnFailure;
		_languageFilterDeliverMessageOnFailure = self.languageFilterDeliverMessageOnFailure;
		_t.languageFilterDeliverMessageOnFailure = _languageFilterDeliverMessageOnFailure;
	}
	if (languageFilterFailuresBeforeKick_set_) {
		int32_t _languageFilterFailuresBeforeKick;
		_languageFilterFailuresBeforeKick = self.languageFilterFailuresBeforeKick;
		_t.languageFilterFailuresBeforeKick = _languageFilterFailuresBeforeKick;
	}
	if (languageFilterKicksBeforeBan_set_) {
		int32_t _languageFilterKicksBeforeBan;
		_languageFilterKicksBeforeBan = self.languageFilterKicksBeforeBan;
		_t.languageFilterKicksBeforeBan = _languageFilterKicksBeforeBan;
	}
	if (languageFilterBanDuration_set_) {
		int32_t _languageFilterBanDuration;
		_languageFilterBanDuration = self.languageFilterBanDuration;
		_t.languageFilterBanDuration = _languageFilterBanDuration;
	}
	if (languageFilterResetAfterKick_set_) {
		BOOL _languageFilterResetAfterKick;
		_languageFilterResetAfterKick = self.languageFilterResetAfterKick;
		_t.languageFilterResetAfterKick = _languageFilterResetAfterKick;
	}
	if (usingFloodingFilter_set_) {
		BOOL _usingFloodingFilter;
		_usingFloodingFilter = self.usingFloodingFilter;
		_t.usingFloodingFilter = _usingFloodingFilter;
	}
	if (floodingFilterSpecified_set_) {
		BOOL _floodingFilterSpecified;
		_floodingFilterSpecified = self.floodingFilterSpecified;
		_t.floodingFilterSpecified = _floodingFilterSpecified;
	}
	if (floodingFilterName_set_ && floodingFilterName_ != nil) {
		NSString* _floodingFilterName;
		_floodingFilterName = self.floodingFilterName;
		_t.floodingFilterName = _floodingFilterName;
	}
	if (floodingFilterFailuresBeforeKick_set_) {
		int32_t _floodingFilterFailuresBeforeKick;
		_floodingFilterFailuresBeforeKick = self.floodingFilterFailuresBeforeKick;
		_t.floodingFilterFailuresBeforeKick = _floodingFilterFailuresBeforeKick;
	}
	if (floodingFilterKicksBeforeBan_set_) {
		int32_t _floodingFilterKicksBeforeBan;
		_floodingFilterKicksBeforeBan = self.floodingFilterKicksBeforeBan;
		_t.floodingFilterKicksBeforeBan = _floodingFilterKicksBeforeBan;
	}
	if (floodingFilterBanDuration_set_) {
		int32_t _floodingFilterBanDuration;
		_floodingFilterBanDuration = self.floodingFilterBanDuration;
		_t.floodingFilterBanDuration = _floodingFilterBanDuration;
	}
	if (floodingFilterResetAfterKick_set_) {
		BOOL _floodingFilterResetAfterKick;
		_floodingFilterResetAfterKick = self.floodingFilterResetAfterKick;
		_t.floodingFilterResetAfterKick = _floodingFilterResetAfterKick;
	}
	return _t;
}

- (id) newThrift {
	return [[ThriftCreateRoomRequest alloc] init];
}

- (void) setZoneName: (NSString*) zoneName {
	[zoneName_ release];
	zoneName_ = [zoneName retain];
	zoneName_set_ = true;
}

- (void) setZoneId: (int32_t) zoneId {
	zoneId_ = zoneId;
	zoneId_set_ = true;
}

- (void) setRoomName: (NSString*) roomName {
	[roomName_ release];
	roomName_ = [roomName retain];
	roomName_set_ = true;
}

- (void) setCapacity: (int32_t) capacity {
	capacity_ = capacity;
	capacity_set_ = true;
}

- (void) setPassword: (NSString*) password {
	[password_ release];
	password_ = [password retain];
	password_set_ = true;
}

- (void) setRoomDescription: (NSString*) roomDescription {
	[roomDescription_ release];
	roomDescription_ = [roomDescription retain];
	roomDescription_set_ = true;
}

- (void) setPersistent: (BOOL) persistent {
	persistent_ = persistent;
	persistent_set_ = true;
}

- (void) setHidden: (BOOL) hidden {
	hidden_ = hidden;
	hidden_set_ = true;
}

- (void) setReceivingRoomListUpdates: (BOOL) receivingRoomListUpdates {
	receivingRoomListUpdates_ = receivingRoomListUpdates;
	receivingRoomListUpdates_set_ = true;
}

- (void) setReceivingRoomAttributeUpdates: (BOOL) receivingRoomAttributeUpdates {
	receivingRoomAttributeUpdates_ = receivingRoomAttributeUpdates;
	receivingRoomAttributeUpdates_set_ = true;
}

- (void) setReceivingUserListUpdates: (BOOL) receivingUserListUpdates {
	receivingUserListUpdates_ = receivingUserListUpdates;
	receivingUserListUpdates_set_ = true;
}

- (void) setReceivingUserVariableUpdates: (BOOL) receivingUserVariableUpdates {
	receivingUserVariableUpdates_ = receivingUserVariableUpdates;
	receivingUserVariableUpdates_set_ = true;
}

- (void) setReceivingRoomVariableUpdates: (BOOL) receivingRoomVariableUpdates {
	receivingRoomVariableUpdates_ = receivingRoomVariableUpdates;
	receivingRoomVariableUpdates_set_ = true;
}

- (void) setReceivingVideoEvents: (BOOL) receivingVideoEvents {
	receivingVideoEvents_ = receivingVideoEvents;
	receivingVideoEvents_set_ = true;
}

- (void) setNonOperatorUpdateAllowed: (BOOL) nonOperatorUpdateAllowed {
	nonOperatorUpdateAllowed_ = nonOperatorUpdateAllowed;
	nonOperatorUpdateAllowed_set_ = true;
}

- (void) setNonOperatorVariableUpdateAllowed: (BOOL) nonOperatorVariableUpdateAllowed {
	nonOperatorVariableUpdateAllowed_ = nonOperatorVariableUpdateAllowed;
	nonOperatorVariableUpdateAllowed_set_ = true;
}

- (void) setCreateOrJoinRoom: (BOOL) createOrJoinRoom {
	createOrJoinRoom_ = createOrJoinRoom;
	createOrJoinRoom_set_ = true;
}

- (void) setPlugins: (NSMutableArray*) plugins {
	[plugins_ release];
	plugins_ = [plugins retain];
	plugins_set_ = true;
}

- (void) setVariables: (NSMutableArray*) variables {
	[variables_ release];
	variables_ = [variables retain];
	variables_set_ = true;
}

- (void) setUsingLanguageFilter: (BOOL) usingLanguageFilter {
	usingLanguageFilter_ = usingLanguageFilter;
	usingLanguageFilter_set_ = true;
}

- (void) setLanguageFilterSpecified: (BOOL) languageFilterSpecified {
	languageFilterSpecified_ = languageFilterSpecified;
	languageFilterSpecified_set_ = true;
}

- (void) setLanguageFilterName: (NSString*) languageFilterName {
	[languageFilterName_ release];
	languageFilterName_ = [languageFilterName retain];
	languageFilterName_set_ = true;
}

- (void) setLanguageFilterDeliverMessageOnFailure: (BOOL) languageFilterDeliverMessageOnFailure {
	languageFilterDeliverMessageOnFailure_ = languageFilterDeliverMessageOnFailure;
	languageFilterDeliverMessageOnFailure_set_ = true;
}

- (void) setLanguageFilterFailuresBeforeKick: (int32_t) languageFilterFailuresBeforeKick {
	languageFilterFailuresBeforeKick_ = languageFilterFailuresBeforeKick;
	languageFilterFailuresBeforeKick_set_ = true;
}

- (void) setLanguageFilterKicksBeforeBan: (int32_t) languageFilterKicksBeforeBan {
	languageFilterKicksBeforeBan_ = languageFilterKicksBeforeBan;
	languageFilterKicksBeforeBan_set_ = true;
}

- (void) setLanguageFilterBanDuration: (int32_t) languageFilterBanDuration {
	languageFilterBanDuration_ = languageFilterBanDuration;
	languageFilterBanDuration_set_ = true;
}

- (void) setLanguageFilterResetAfterKick: (BOOL) languageFilterResetAfterKick {
	languageFilterResetAfterKick_ = languageFilterResetAfterKick;
	languageFilterResetAfterKick_set_ = true;
}

- (void) setUsingFloodingFilter: (BOOL) usingFloodingFilter {
	usingFloodingFilter_ = usingFloodingFilter;
	usingFloodingFilter_set_ = true;
}

- (void) setFloodingFilterSpecified: (BOOL) floodingFilterSpecified {
	floodingFilterSpecified_ = floodingFilterSpecified;
	floodingFilterSpecified_set_ = true;
}

- (void) setFloodingFilterName: (NSString*) floodingFilterName {
	[floodingFilterName_ release];
	floodingFilterName_ = [floodingFilterName retain];
	floodingFilterName_set_ = true;
}

- (void) setFloodingFilterFailuresBeforeKick: (int32_t) floodingFilterFailuresBeforeKick {
	floodingFilterFailuresBeforeKick_ = floodingFilterFailuresBeforeKick;
	floodingFilterFailuresBeforeKick_set_ = true;
}

- (void) setFloodingFilterKicksBeforeBan: (int32_t) floodingFilterKicksBeforeBan {
	floodingFilterKicksBeforeBan_ = floodingFilterKicksBeforeBan;
	floodingFilterKicksBeforeBan_set_ = true;
}

- (void) setFloodingFilterBanDuration: (int32_t) floodingFilterBanDuration {
	floodingFilterBanDuration_ = floodingFilterBanDuration;
	floodingFilterBanDuration_set_ = true;
}

- (void) setFloodingFilterResetAfterKick: (BOOL) floodingFilterResetAfterKick {
	floodingFilterResetAfterKick_ = floodingFilterResetAfterKick;
	floodingFilterResetAfterKick_set_ = true;
}

- (void) dealloc {
	self.zoneName = nil;
	self.roomName = nil;
	self.password = nil;
	self.roomDescription = nil;
	self.plugins = nil;
	self.variables = nil;
	self.languageFilterName = nil;
	self.floodingFilterName = nil;
	[super dealloc];
}

@end

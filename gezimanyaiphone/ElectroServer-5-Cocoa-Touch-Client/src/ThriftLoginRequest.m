/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "ThriftFlattenedEsObject.h"
#import "ThriftFlattenedEsObjectRO.h"
#import "ThriftProtocol.h"

#import "ThriftLoginRequest.h"


@implementation ThriftLoginRequestConstants
+ (void) initialize {
}
@end

@implementation ThriftLoginRequest

- (id) initWithUserName: (NSString *) userName password: (NSString *) password sharedSecret: (NSString *) sharedSecret esObject: (ThriftFlattenedEsObjectRO *) esObject userVariables: (NSDictionary *) userVariables protocol: (int) protocol hashId: (int32_t) hashId clientVersion: (NSString *) clientVersion clientType: (NSString *) clientType remoteAddress: (NSArray *) remoteAddress
{
  self = [super init];
  __userName = [userName retain];
  __userName_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  __sharedSecret = [sharedSecret retain];
  __sharedSecret_isset = YES;
  __esObject = [esObject retain];
  __esObject_isset = YES;
  __userVariables = [userVariables retain];
  __userVariables_isset = YES;
  __protocol = protocol;
  __protocol_isset = YES;
  __hashId = hashId;
  __hashId_isset = YES;
  __clientVersion = [clientVersion retain];
  __clientVersion_isset = YES;
  __clientType = [clientType retain];
  __clientType_isset = YES;
  __remoteAddress = [remoteAddress retain];
  __remoteAddress_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedSecret"])
  {
    __sharedSecret = [[decoder decodeObjectForKey: @"sharedSecret"] retain];
    __sharedSecret_isset = YES;
  }
  if ([decoder containsValueForKey: @"esObject"])
  {
    __esObject = [[decoder decodeObjectForKey: @"esObject"] retain];
    __esObject_isset = YES;
  }
  if ([decoder containsValueForKey: @"userVariables"])
  {
    __userVariables = [[decoder decodeObjectForKey: @"userVariables"] retain];
    __userVariables_isset = YES;
  }
  if ([decoder containsValueForKey: @"protocol"])
  {
    __protocol = [decoder decodeIntForKey: @"protocol"];
    __protocol_isset = YES;
  }
  if ([decoder containsValueForKey: @"hashId"])
  {
    __hashId = [decoder decodeInt32ForKey: @"hashId"];
    __hashId_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientVersion"])
  {
    __clientVersion = [[decoder decodeObjectForKey: @"clientVersion"] retain];
    __clientVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientType"])
  {
    __clientType = [[decoder decodeObjectForKey: @"clientType"] retain];
    __clientType_isset = YES;
  }
  if ([decoder containsValueForKey: @"remoteAddress"])
  {
    __remoteAddress = [[decoder decodeObjectForKey: @"remoteAddress"] retain];
    __remoteAddress_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__sharedSecret_isset)
  {
    [encoder encodeObject: __sharedSecret forKey: @"sharedSecret"];
  }
  if (__esObject_isset)
  {
    [encoder encodeObject: __esObject forKey: @"esObject"];
  }
  if (__userVariables_isset)
  {
    [encoder encodeObject: __userVariables forKey: @"userVariables"];
  }
  if (__protocol_isset)
  {
    [encoder encodeInt: __protocol forKey: @"protocol"];
  }
  if (__hashId_isset)
  {
    [encoder encodeInt32: __hashId forKey: @"hashId"];
  }
  if (__clientVersion_isset)
  {
    [encoder encodeObject: __clientVersion forKey: @"clientVersion"];
  }
  if (__clientType_isset)
  {
    [encoder encodeObject: __clientType forKey: @"clientType"];
  }
  if (__remoteAddress_isset)
  {
    [encoder encodeObject: __remoteAddress forKey: @"remoteAddress"];
  }
}

- (void) dealloc
{
  [__userName release];
  [__password release];
  [__sharedSecret release];
  [__esObject release];
  [__userVariables release];
  [__clientVersion release];
  [__clientType release];
  [__remoteAddress release];
  [super dealloc];
}

- (NSString *) userName {
  return [[__userName retain] autorelease];
}

- (void) setUserName: (NSString *) userName {
  [userName retain];
  [__userName release];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) sharedSecret {
  return [[__sharedSecret retain] autorelease];
}

- (void) setSharedSecret: (NSString *) sharedSecret {
  [sharedSecret retain];
  [__sharedSecret release];
  __sharedSecret = sharedSecret;
  __sharedSecret_isset = YES;
}

- (BOOL) sharedSecretIsSet {
  return __sharedSecret_isset;
}

- (void) unsetSharedSecret {
  [__sharedSecret release];
  __sharedSecret = nil;
  __sharedSecret_isset = NO;
}

- (ThriftFlattenedEsObjectRO *) esObject {
  return [[__esObject retain] autorelease];
}

- (void) setEsObject: (ThriftFlattenedEsObjectRO *) esObject {
  [esObject retain];
  [__esObject release];
  __esObject = esObject;
  __esObject_isset = YES;
}

- (BOOL) esObjectIsSet {
  return __esObject_isset;
}

- (void) unsetEsObject {
  [__esObject release];
  __esObject = nil;
  __esObject_isset = NO;
}

- (NSDictionary *) userVariables {
  return [[__userVariables retain] autorelease];
}

- (void) setUserVariables: (NSDictionary *) userVariables {
  [userVariables retain];
  [__userVariables release];
  __userVariables = userVariables;
  __userVariables_isset = YES;
}

- (BOOL) userVariablesIsSet {
  return __userVariables_isset;
}

- (void) unsetUserVariables {
  [__userVariables release];
  __userVariables = nil;
  __userVariables_isset = NO;
}

- (int) protocol {
  return __protocol;
}

- (void) setProtocol: (int) protocol {
  __protocol = protocol;
  __protocol_isset = YES;
}

- (BOOL) protocolIsSet {
  return __protocol_isset;
}

- (void) unsetProtocol {
  __protocol_isset = NO;
}

- (int32_t) hashId {
  return __hashId;
}

- (void) setHashId: (int32_t) hashId {
  __hashId = hashId;
  __hashId_isset = YES;
}

- (BOOL) hashIdIsSet {
  return __hashId_isset;
}

- (void) unsetHashId {
  __hashId_isset = NO;
}

- (NSString *) clientVersion {
  return [[__clientVersion retain] autorelease];
}

- (void) setClientVersion: (NSString *) clientVersion {
  [clientVersion retain];
  [__clientVersion release];
  __clientVersion = clientVersion;
  __clientVersion_isset = YES;
}

- (BOOL) clientVersionIsSet {
  return __clientVersion_isset;
}

- (void) unsetClientVersion {
  [__clientVersion release];
  __clientVersion = nil;
  __clientVersion_isset = NO;
}

- (NSString *) clientType {
  return [[__clientType retain] autorelease];
}

- (void) setClientType: (NSString *) clientType {
  [clientType retain];
  [__clientType release];
  __clientType = clientType;
  __clientType_isset = YES;
}

- (BOOL) clientTypeIsSet {
  return __clientType_isset;
}

- (void) unsetClientType {
  [__clientType release];
  __clientType = nil;
  __clientType_isset = NO;
}

- (NSArray *) remoteAddress {
  return [[__remoteAddress retain] autorelease];
}

- (void) setRemoteAddress: (NSArray *) remoteAddress {
  [remoteAddress retain];
  [__remoteAddress release];
  __remoteAddress = remoteAddress;
  __remoteAddress_isset = YES;
}

- (BOOL) remoteAddressIsSet {
  return __remoteAddress_isset;
}

- (void) unsetRemoteAddress {
  [__remoteAddress release];
  __remoteAddress = nil;
  __remoteAddress_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSharedSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          ThriftFlattenedEsObjectRO *fieldValue = [[ThriftFlattenedEsObjectRO alloc] init];
          [fieldValue read: inProtocol];
          [self setEsObject: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            ThriftFlattenedEsObject *_val3 = [[ThriftFlattenedEsObject alloc] init];
            [_val3 read: inProtocol];
            [fieldValue setObject: _val3 forKey: _key2];
            [_val3 release];
          }
          [inProtocol readMapEnd];
          [self setUserVariables: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setProtocol: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHashId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size4;
          [inProtocol readListBeginReturningElementType: NULL size: &_size4];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size4];
          int _i5;
          for (_i5 = 0; _i5 < _size4; ++_i5)
          {
            uint8_t _elem6 = [inProtocol readByte];
            [fieldValue addObject: [NSNumber numberWithUnsignedChar: _elem6]];
          }
          [inProtocol readListEnd];
          [self setRemoteAddress: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftLoginRequest"];
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedSecret_isset) {
    if (__sharedSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedSecret" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __sharedSecret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__esObject_isset) {
    if (__esObject != nil) {
      [outProtocol writeFieldBeginWithName: @"esObject" type: TType_STRUCT fieldID: 4];
      [__esObject write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userVariables_isset) {
    if (__userVariables != nil) {
      [outProtocol writeFieldBeginWithName: @"userVariables" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRUCT size: [__userVariables count]];
        NSEnumerator * _iter7 = [__userVariables keyEnumerator];
        id key8;
        while ((key8 = [_iter7 nextObject]))
        {
          [outProtocol writeString: key8];
          [[__userVariables objectForKey: key8] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__protocol_isset) {
    [outProtocol writeFieldBeginWithName: @"protocol" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __protocol];
    [outProtocol writeFieldEnd];
  }
  if (__hashId_isset) {
    [outProtocol writeFieldBeginWithName: @"hashId" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __hashId];
    [outProtocol writeFieldEnd];
  }
  if (__clientVersion_isset) {
    if (__clientVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"clientVersion" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __clientVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientType_isset) {
    if (__clientType != nil) {
      [outProtocol writeFieldBeginWithName: @"clientType" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __clientType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remoteAddress_isset) {
    if (__remoteAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"remoteAddress" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_BYTE size: [__remoteAddress count]];
        int i10;
        for (i10 = 0; i10 < [__remoteAddress count]; i10++)
        {
          [outProtocol writeByte: [[__remoteAddress objectAtIndex: i10] unsignedCharValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftLoginRequest("];
  [ms appendString: @"userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",sharedSecret:"];
  [ms appendFormat: @"\"%@\"", __sharedSecret];
  [ms appendString: @",esObject:"];
  [ms appendFormat: @"%@", __esObject];
  [ms appendString: @",userVariables:"];
  [ms appendFormat: @"%@", __userVariables];
  [ms appendString: @",protocol:"];
  [ms appendFormat: @"%i", __protocol];
  [ms appendString: @",hashId:"];
  [ms appendFormat: @"%i", __hashId];
  [ms appendString: @",clientVersion:"];
  [ms appendFormat: @"\"%@\"", __clientVersion];
  [ms appendString: @",clientType:"];
  [ms appendFormat: @"\"%@\"", __clientType];
  [ms appendString: @",remoteAddress:"];
  [ms appendFormat: @"%@", __remoteAddress];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


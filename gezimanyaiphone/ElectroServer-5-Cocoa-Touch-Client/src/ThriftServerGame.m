/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "ThriftFlattenedEsObject.h"

#import "ThriftServerGame.h"


@implementation ThriftServerGameConstants
+ (void) initialize {
}
@end

@implementation ThriftServerGame

- (id) initWithGameDetails: (ThriftFlattenedEsObject *) gameDetails id: (int32_t) id roomId: (int32_t) roomId zoneId: (int32_t) zoneId locked: (BOOL) locked passwordProtected: (BOOL) passwordProtected
{
  self = [super init];
  __gameDetails = [gameDetails retain];
  __gameDetails_isset = YES;
  __id = id;
  __id_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __zoneId = zoneId;
  __zoneId_isset = YES;
  __locked = locked;
  __locked_isset = YES;
  __passwordProtected = passwordProtected;
  __passwordProtected_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameDetails"])
  {
    __gameDetails = [[decoder decodeObjectForKey: @"gameDetails"] retain];
    __gameDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"zoneId"])
  {
    __zoneId = [decoder decodeInt32ForKey: @"zoneId"];
    __zoneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"locked"])
  {
    __locked = [decoder decodeBoolForKey: @"locked"];
    __locked_isset = YES;
  }
  if ([decoder containsValueForKey: @"passwordProtected"])
  {
    __passwordProtected = [decoder decodeBoolForKey: @"passwordProtected"];
    __passwordProtected_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameDetails_isset)
  {
    [encoder encodeObject: __gameDetails forKey: @"gameDetails"];
  }
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
  if (__zoneId_isset)
  {
    [encoder encodeInt32: __zoneId forKey: @"zoneId"];
  }
  if (__locked_isset)
  {
    [encoder encodeBool: __locked forKey: @"locked"];
  }
  if (__passwordProtected_isset)
  {
    [encoder encodeBool: __passwordProtected forKey: @"passwordProtected"];
  }
}

- (void) dealloc
{
  [__gameDetails release];
  [super dealloc];
}

- (ThriftFlattenedEsObject *) gameDetails {
  return [[__gameDetails retain] autorelease];
}

- (void) setGameDetails: (ThriftFlattenedEsObject *) gameDetails {
  [gameDetails retain];
  [__gameDetails release];
  __gameDetails = gameDetails;
  __gameDetails_isset = YES;
}

- (BOOL) gameDetailsIsSet {
  return __gameDetails_isset;
}

- (void) unsetGameDetails {
  [__gameDetails release];
  __gameDetails = nil;
  __gameDetails_isset = NO;
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (int32_t) zoneId {
  return __zoneId;
}

- (void) setZoneId: (int32_t) zoneId {
  __zoneId = zoneId;
  __zoneId_isset = YES;
}

- (BOOL) zoneIdIsSet {
  return __zoneId_isset;
}

- (void) unsetZoneId {
  __zoneId_isset = NO;
}

- (BOOL) locked {
  return __locked;
}

- (void) setLocked: (BOOL) locked {
  __locked = locked;
  __locked_isset = YES;
}

- (BOOL) lockedIsSet {
  return __locked_isset;
}

- (void) unsetLocked {
  __locked_isset = NO;
}

- (BOOL) passwordProtected {
  return __passwordProtected;
}

- (void) setPasswordProtected: (BOOL) passwordProtected {
  __passwordProtected = passwordProtected;
  __passwordProtected_isset = YES;
}

- (BOOL) passwordProtectedIsSet {
  return __passwordProtected_isset;
}

- (void) unsetPasswordProtected {
  __passwordProtected_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftFlattenedEsObject *fieldValue = [[ThriftFlattenedEsObject alloc] init];
          [fieldValue read: inProtocol];
          [self setGameDetails: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZoneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setLocked: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPasswordProtected: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftServerGame"];
  if (__gameDetails_isset) {
    if (__gameDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"gameDetails" type: TType_STRUCT fieldID: 1];
      [__gameDetails write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__zoneId_isset) {
    [outProtocol writeFieldBeginWithName: @"zoneId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __zoneId];
    [outProtocol writeFieldEnd];
  }
  if (__locked_isset) {
    [outProtocol writeFieldBeginWithName: @"locked" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __locked];
    [outProtocol writeFieldEnd];
  }
  if (__passwordProtected_isset) {
    [outProtocol writeFieldBeginWithName: @"passwordProtected" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __passwordProtected];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftServerGame("];
  [ms appendString: @"gameDetails:"];
  [ms appendFormat: @"%@", __gameDetails];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @",zoneId:"];
  [ms appendFormat: @"%i", __zoneId];
  [ms appendString: @",locked:"];
  [ms appendFormat: @"%i", __locked];
  [ms appendString: @",passwordProtected:"];
  [ms appendFormat: @"%i", __passwordProtected];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


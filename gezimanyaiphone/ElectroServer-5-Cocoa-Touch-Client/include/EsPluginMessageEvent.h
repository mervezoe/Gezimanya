//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftPluginMessageEvent.h>
#import <EsFlattenedEsObject.h>
#import <ThriftFlattenedEsObject.h>

/**
 * This even occurs when a message from a plugin is received. That message could have been sent to a room that the client is in, or sent directly to that client. It could have originated 
 from a plugin in a room that the client is in, or from a plugin in a room that the client is not in, or from a server-level plugin. There is enough information on the event object 
 to determine the origin of the message.
 
 In most cases all you care about is the pluginName (to give you some context about where the message came from) and the 'parameters' EsObject property which contains the custom information 
 that the plugin wanted you to know abut.
 * 
 * This shows how to send a message to a room-level plugin, and how to capture a plugin message event when one is received.
 
<pre>
private var _es:ElectroServer;
private var _room:Room;

private function initialize():void {
        _es.engine.addEventListener(MessageType.PluginMessageEvent.name, onPluginMessageEvent);
}

private function sendTestMessage():void {
        var ipr:InvokePluginRequest = new InvokePluginRequest();

        ipr.roomId = _room.id;
        ipr.zoneId = _room.zoneId;

        ipr.pluginName = "TankGame";
        ipr.parameters = new EsObject();
        ipr.parameters.setString("action", "shoot");
        ipr.parameters.setInteger("angle", 45);

        _es.engine.send(ipr);
}

private function onPluginMessageEvent(e:PluginMessageEvent):void {
        trace("plugin message event received");
        trace(e.pluginName);
        trace(e.parameters.getString("action"));
}
</pre>
 */
@interface EsPluginMessageEvent : EsEvent {
@private
	BOOL pluginName_set_;
	NSString* pluginName_;
	BOOL sentToRoom_set_;
	BOOL sentToRoom_;
	BOOL destinationZoneId_set_;
	int32_t destinationZoneId_;
	BOOL destinationRoomId_set_;
	int32_t destinationRoomId_;
	BOOL roomLevelPlugin_set_;
	BOOL roomLevelPlugin_;
	BOOL originZoneId_set_;
	int32_t originZoneId_;
	BOOL originRoomId_set_;
	int32_t originRoomId_;
	BOOL parameters_set_;
	EsObject* parameters_;
}

/**
 * Name of the plugin instance that sent the message.
 */
@property(retain,nonatomic) NSString* pluginName;
/**
 * If true then this message was sent to a room and not to the client directly.
 */
@property(nonatomic) BOOL sentToRoom;
/**
 * If 'sentToRoom' is true then 'destinationZoneId' and 'destinationRoomId' contain the ids of the target zone and room.
 */
@property(nonatomic) int32_t destinationZoneId;
/**
 * If 'sentToRoom' is true then 'destinationZoneId' and 'destinationRoomId' contain the ids of the target zone and room.
 */
@property(nonatomic) int32_t destinationRoomId;
@property(nonatomic) BOOL roomLevelPlugin;
/**
 * Id of the zone that contains the room (that contains the plugin), if the message originated from a room-level plugin.
 */
@property(nonatomic) int32_t originZoneId;
/**
 * Id of the room that contains the plugin, if the message originated from a room-level plugin.
 */
@property(nonatomic) int32_t originRoomId;
/**
 * All custom information that the plugin has sent to the client is contained in this EsObject.
 */
@property(retain,nonatomic) EsObject* parameters;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftPluginMessageEvent*) toThrift;
- (id) newThrift;
@end

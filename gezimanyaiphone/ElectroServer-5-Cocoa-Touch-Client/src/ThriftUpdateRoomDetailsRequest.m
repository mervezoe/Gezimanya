/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "ThriftUpdateRoomDetailsRequest.h"


@implementation ThriftUpdateRoomDetailsRequestConstants
+ (void) initialize {
}
@end

@implementation ThriftUpdateRoomDetailsRequest

- (id) initWithZoneId: (int32_t) zoneId roomId: (int32_t) roomId capacityUpdate: (BOOL) capacityUpdate capacity: (int32_t) capacity roomDescriptionUpdate: (BOOL) roomDescriptionUpdate roomDescription: (NSString *) roomDescription roomNameUpdate: (BOOL) roomNameUpdate roomName: (NSString *) roomName passwordUpdate: (BOOL) passwordUpdate password: (NSString *) password hiddenUpdate: (BOOL) hiddenUpdate hidden: (BOOL) hidden
{
  self = [super init];
  __zoneId = zoneId;
  __zoneId_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __capacityUpdate = capacityUpdate;
  __capacityUpdate_isset = YES;
  __capacity = capacity;
  __capacity_isset = YES;
  __roomDescriptionUpdate = roomDescriptionUpdate;
  __roomDescriptionUpdate_isset = YES;
  __roomDescription = [roomDescription retain];
  __roomDescription_isset = YES;
  __roomNameUpdate = roomNameUpdate;
  __roomNameUpdate_isset = YES;
  __roomName = [roomName retain];
  __roomName_isset = YES;
  __passwordUpdate = passwordUpdate;
  __passwordUpdate_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  __hiddenUpdate = hiddenUpdate;
  __hiddenUpdate_isset = YES;
  __hidden = hidden;
  __hidden_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"zoneId"])
  {
    __zoneId = [decoder decodeInt32ForKey: @"zoneId"];
    __zoneId_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"capacityUpdate"])
  {
    __capacityUpdate = [decoder decodeBoolForKey: @"capacityUpdate"];
    __capacityUpdate_isset = YES;
  }
  if ([decoder containsValueForKey: @"capacity"])
  {
    __capacity = [decoder decodeInt32ForKey: @"capacity"];
    __capacity_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomDescriptionUpdate"])
  {
    __roomDescriptionUpdate = [decoder decodeBoolForKey: @"roomDescriptionUpdate"];
    __roomDescriptionUpdate_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomDescription"])
  {
    __roomDescription = [[decoder decodeObjectForKey: @"roomDescription"] retain];
    __roomDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomNameUpdate"])
  {
    __roomNameUpdate = [decoder decodeBoolForKey: @"roomNameUpdate"];
    __roomNameUpdate_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomName"])
  {
    __roomName = [[decoder decodeObjectForKey: @"roomName"] retain];
    __roomName_isset = YES;
  }
  if ([decoder containsValueForKey: @"passwordUpdate"])
  {
    __passwordUpdate = [decoder decodeBoolForKey: @"passwordUpdate"];
    __passwordUpdate_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"hiddenUpdate"])
  {
    __hiddenUpdate = [decoder decodeBoolForKey: @"hiddenUpdate"];
    __hiddenUpdate_isset = YES;
  }
  if ([decoder containsValueForKey: @"hidden"])
  {
    __hidden = [decoder decodeBoolForKey: @"hidden"];
    __hidden_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__zoneId_isset)
  {
    [encoder encodeInt32: __zoneId forKey: @"zoneId"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
  if (__capacityUpdate_isset)
  {
    [encoder encodeBool: __capacityUpdate forKey: @"capacityUpdate"];
  }
  if (__capacity_isset)
  {
    [encoder encodeInt32: __capacity forKey: @"capacity"];
  }
  if (__roomDescriptionUpdate_isset)
  {
    [encoder encodeBool: __roomDescriptionUpdate forKey: @"roomDescriptionUpdate"];
  }
  if (__roomDescription_isset)
  {
    [encoder encodeObject: __roomDescription forKey: @"roomDescription"];
  }
  if (__roomNameUpdate_isset)
  {
    [encoder encodeBool: __roomNameUpdate forKey: @"roomNameUpdate"];
  }
  if (__roomName_isset)
  {
    [encoder encodeObject: __roomName forKey: @"roomName"];
  }
  if (__passwordUpdate_isset)
  {
    [encoder encodeBool: __passwordUpdate forKey: @"passwordUpdate"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__hiddenUpdate_isset)
  {
    [encoder encodeBool: __hiddenUpdate forKey: @"hiddenUpdate"];
  }
  if (__hidden_isset)
  {
    [encoder encodeBool: __hidden forKey: @"hidden"];
  }
}

- (void) dealloc
{
  [__roomDescription release];
  [__roomName release];
  [__password release];
  [super dealloc];
}

- (int32_t) zoneId {
  return __zoneId;
}

- (void) setZoneId: (int32_t) zoneId {
  __zoneId = zoneId;
  __zoneId_isset = YES;
}

- (BOOL) zoneIdIsSet {
  return __zoneId_isset;
}

- (void) unsetZoneId {
  __zoneId_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (BOOL) capacityUpdate {
  return __capacityUpdate;
}

- (void) setCapacityUpdate: (BOOL) capacityUpdate {
  __capacityUpdate = capacityUpdate;
  __capacityUpdate_isset = YES;
}

- (BOOL) capacityUpdateIsSet {
  return __capacityUpdate_isset;
}

- (void) unsetCapacityUpdate {
  __capacityUpdate_isset = NO;
}

- (int32_t) capacity {
  return __capacity;
}

- (void) setCapacity: (int32_t) capacity {
  __capacity = capacity;
  __capacity_isset = YES;
}

- (BOOL) capacityIsSet {
  return __capacity_isset;
}

- (void) unsetCapacity {
  __capacity_isset = NO;
}

- (BOOL) roomDescriptionUpdate {
  return __roomDescriptionUpdate;
}

- (void) setRoomDescriptionUpdate: (BOOL) roomDescriptionUpdate {
  __roomDescriptionUpdate = roomDescriptionUpdate;
  __roomDescriptionUpdate_isset = YES;
}

- (BOOL) roomDescriptionUpdateIsSet {
  return __roomDescriptionUpdate_isset;
}

- (void) unsetRoomDescriptionUpdate {
  __roomDescriptionUpdate_isset = NO;
}

- (NSString *) roomDescription {
  return [[__roomDescription retain] autorelease];
}

- (void) setRoomDescription: (NSString *) roomDescription {
  [roomDescription retain];
  [__roomDescription release];
  __roomDescription = roomDescription;
  __roomDescription_isset = YES;
}

- (BOOL) roomDescriptionIsSet {
  return __roomDescription_isset;
}

- (void) unsetRoomDescription {
  [__roomDescription release];
  __roomDescription = nil;
  __roomDescription_isset = NO;
}

- (BOOL) roomNameUpdate {
  return __roomNameUpdate;
}

- (void) setRoomNameUpdate: (BOOL) roomNameUpdate {
  __roomNameUpdate = roomNameUpdate;
  __roomNameUpdate_isset = YES;
}

- (BOOL) roomNameUpdateIsSet {
  return __roomNameUpdate_isset;
}

- (void) unsetRoomNameUpdate {
  __roomNameUpdate_isset = NO;
}

- (NSString *) roomName {
  return [[__roomName retain] autorelease];
}

- (void) setRoomName: (NSString *) roomName {
  [roomName retain];
  [__roomName release];
  __roomName = roomName;
  __roomName_isset = YES;
}

- (BOOL) roomNameIsSet {
  return __roomName_isset;
}

- (void) unsetRoomName {
  [__roomName release];
  __roomName = nil;
  __roomName_isset = NO;
}

- (BOOL) passwordUpdate {
  return __passwordUpdate;
}

- (void) setPasswordUpdate: (BOOL) passwordUpdate {
  __passwordUpdate = passwordUpdate;
  __passwordUpdate_isset = YES;
}

- (BOOL) passwordUpdateIsSet {
  return __passwordUpdate_isset;
}

- (void) unsetPasswordUpdate {
  __passwordUpdate_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (BOOL) hiddenUpdate {
  return __hiddenUpdate;
}

- (void) setHiddenUpdate: (BOOL) hiddenUpdate {
  __hiddenUpdate = hiddenUpdate;
  __hiddenUpdate_isset = YES;
}

- (BOOL) hiddenUpdateIsSet {
  return __hiddenUpdate_isset;
}

- (void) unsetHiddenUpdate {
  __hiddenUpdate_isset = NO;
}

- (BOOL) hidden {
  return __hidden;
}

- (void) setHidden: (BOOL) hidden {
  __hidden = hidden;
  __hidden_isset = YES;
}

- (BOOL) hiddenIsSet {
  return __hidden_isset;
}

- (void) unsetHidden {
  __hidden_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZoneId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCapacityUpdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRoomDescriptionUpdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRoomNameUpdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPasswordUpdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHiddenUpdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHidden: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftUpdateRoomDetailsRequest"];
  if (__zoneId_isset) {
    [outProtocol writeFieldBeginWithName: @"zoneId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __zoneId];
    [outProtocol writeFieldEnd];
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__capacityUpdate_isset) {
    [outProtocol writeFieldBeginWithName: @"capacityUpdate" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __capacityUpdate];
    [outProtocol writeFieldEnd];
  }
  if (__capacity_isset) {
    [outProtocol writeFieldBeginWithName: @"capacity" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __capacity];
    [outProtocol writeFieldEnd];
  }
  if (__roomDescriptionUpdate_isset) {
    [outProtocol writeFieldBeginWithName: @"roomDescriptionUpdate" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __roomDescriptionUpdate];
    [outProtocol writeFieldEnd];
  }
  if (__roomDescription_isset) {
    if (__roomDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"roomDescription" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __roomDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomNameUpdate_isset) {
    [outProtocol writeFieldBeginWithName: @"roomNameUpdate" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __roomNameUpdate];
    [outProtocol writeFieldEnd];
  }
  if (__roomName_isset) {
    if (__roomName != nil) {
      [outProtocol writeFieldBeginWithName: @"roomName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __roomName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__passwordUpdate_isset) {
    [outProtocol writeFieldBeginWithName: @"passwordUpdate" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __passwordUpdate];
    [outProtocol writeFieldEnd];
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hiddenUpdate_isset) {
    [outProtocol writeFieldBeginWithName: @"hiddenUpdate" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __hiddenUpdate];
    [outProtocol writeFieldEnd];
  }
  if (__hidden_isset) {
    [outProtocol writeFieldBeginWithName: @"hidden" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __hidden];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftUpdateRoomDetailsRequest("];
  [ms appendString: @"zoneId:"];
  [ms appendFormat: @"%i", __zoneId];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @",capacityUpdate:"];
  [ms appendFormat: @"%i", __capacityUpdate];
  [ms appendString: @",capacity:"];
  [ms appendFormat: @"%i", __capacity];
  [ms appendString: @",roomDescriptionUpdate:"];
  [ms appendFormat: @"%i", __roomDescriptionUpdate];
  [ms appendString: @",roomDescription:"];
  [ms appendFormat: @"\"%@\"", __roomDescription];
  [ms appendString: @",roomNameUpdate:"];
  [ms appendFormat: @"%i", __roomNameUpdate];
  [ms appendString: @",roomName:"];
  [ms appendFormat: @"\"%@\"", __roomName];
  [ms appendString: @",passwordUpdate:"];
  [ms appendFormat: @"%i", __passwordUpdate];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",hiddenUpdate:"];
  [ms appendFormat: @"%i", __hiddenUpdate];
  [ms appendString: @",hidden:"];
  [ms appendFormat: @"%i", __hidden];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


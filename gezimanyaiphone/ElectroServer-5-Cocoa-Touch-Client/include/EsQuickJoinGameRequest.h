//
//  Autogenerated by CocoaTouchApiGenerator
//
//  DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//



#import <EsMessage.h>
#import <EsMessageType.h>
#import <EsRequest.h>
#import <EsResponse.h>
#import <EsEvent.h>
#import <EsEntity.h>
#import <EsObject.h>
#import <ThriftQuickJoinGameRequest.h>
#import <EsFlattenedEsObject.h>
#import <ThriftFlattenedEsObject.h>
#import <EsSearchCriteria.h>
#import <ThriftSearchCriteria.h>

/**
 * This request is used to create a new game on the server, or to join a game that matches the criteria passed in. This server feature is called the Game Manager. In order to use a game 
 with the Game Manager the game must be registered with the server via the Remote Admin. A game is essentially just a room with one or more plugins associated with it. All games that are 
 managed can be searched using the FindGamesReqest. A game can be joined via QuickJoinGameRequest or by using the JoinGameRequest and specifying a specific game id. You can learn of a 
 game id by someone telling you via various server messaging techniques, or by loading a list of games using the FindGamesRequest and looking at the game ids.
 * 
 * This example shows how to create a fictional game of poker. If the game was registered with the server as PokerGame, and if the game plugin was set up to receive and interpret 
 the custom EsObject passed in, then this is what the code to create or join such a game would look like.
 
<pre>
private var _es:ElectroServer;

private function initialize():void {
        _es.engine.addEventListener(MessageType.CreateOrJoinGameResponse.name, onCreateOrJoinGameResponse);
        _es.engine.addEventListener(MessageType.JoinRoomEvent.name, onJoinRoomEvent);

        //create the request
        var qjr:QuickJoinGameRequest = new QuickJoinGameRequest();

        //gameType is the name of the game as registered on the server
        qjr.gameType = "PokerGame";

        //zone in which to put the game
        qjr.zoneName = "GameZone";

        //should the game show up in the room list
        qjr.hidden = false;

        //if true, the game is automatically locked when you join until unlocked
        qjr.locked = false;

        //if true, then the request won't look for an existing game for you to join, it will only create one
        qjr.createOnly = false;

        //optional EsObject of data to pass into the game
        var esob:EsObject = new EsObject();
        esob.setInteger("potLimit", 2500);
        esob.setInteger("tableSize", 8);

        qjr.gameDetails = esob;

        _es.engine.send(qjr);
}

private function onJoinRoomEvent(e:JoinRoomEvent):void {
        trace("Joined the game room");
}

private function onCreateOrJoinGameResponse(e:CreateOrJoinGameResponse):void {
        trace("Joined game: " + e.successful.toString());
}
</pre>
 */
@interface EsQuickJoinGameRequest : EsRequest {
@private
	BOOL gameType_set_;
	NSString* gameType_;
	BOOL zoneName_set_;
	NSString* zoneName_;
	BOOL password_set_;
	NSString* password_;
	BOOL locked_set_;
	BOOL locked_;
	BOOL hidden_set_;
	BOOL hidden_;
	BOOL createOnly_set_;
	BOOL createOnly_;
	BOOL gameDetails_set_;
	EsObject* gameDetails_;
	BOOL criteria_set_;
	EsSearchCriteria* criteria_;
}

/**
 * The game type as registered with the server via the Remote Admin.
 */
@property(retain,nonatomic) NSString* gameType;
/**
 * Name of the zone to create the game in.
 */
@property(retain,nonatomic) NSString* zoneName;
/**
 * Optional password used when creating or joining a game.
 */
@property(retain,nonatomic) NSString* password;
/**
 * If true, then the game is locked as soon as you join it (if you're the one that created it). The game can later be unlocked by the game plugin.
 */
@property(nonatomic) BOOL locked;
/**
 * If true, the room that is the game is hidden from the room list.
 */
@property(nonatomic) BOOL hidden;
/**
 * If true, then the request doesn't first try to search for an existing game for you to join. It will only create a new game. If false, the server will search for an already open game 
 that meets the criteria specified in this request.
 */
@property(nonatomic) BOOL createOnly;
/**
 * Optional custom EsObject to be passed into the initialization event in the plugin when the game is created.
 */
@property(retain,nonatomic) EsObject* gameDetails;
/**
 * A search criteria object used for a greater level of matching. This can be used to say, search for only games that are using a specify game map.
 */
@property(retain,nonatomic) EsSearchCriteria* criteria;

- (id) init;
- (id) initWithThriftObject: (id) thriftObject;
- (void) fromThrift: (id) thriftObject;
- (ThriftQuickJoinGameRequest*) toThrift;
- (id) newThrift;
@end
